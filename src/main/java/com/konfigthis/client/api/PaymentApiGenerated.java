/*
 * Coinprofile business API
 * Coinprofile business API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PaymentCreateNewPaymentRequest;
import com.konfigthis.client.model.PaymentCreateNewPaymentResponse;
import com.konfigthis.client.model.PaymentGetSingleResponse;
import com.konfigthis.client.model.PaymentResolveOverpaidTransactionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PaymentApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaymentApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewPaymentCall(PaymentCreateNewPaymentRequest paymentCreateNewPaymentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentCreateNewPaymentRequest;

        // create path and map variables
        String localVarPath = "/payment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "ApiUser", "UserVersion" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewPaymentValidateBeforeCall(PaymentCreateNewPaymentRequest paymentCreateNewPaymentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentCreateNewPaymentRequest' is set
        if (paymentCreateNewPaymentRequest == null) {
            throw new ApiException("Missing the required parameter 'paymentCreateNewPaymentRequest' when calling createNewPayment(Async)");
        }

        return createNewPaymentCall(paymentCreateNewPaymentRequest, _callback);

    }


    private ApiResponse<PaymentCreateNewPaymentResponse> createNewPaymentWithHttpInfo(PaymentCreateNewPaymentRequest paymentCreateNewPaymentRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewPaymentValidateBeforeCall(paymentCreateNewPaymentRequest, null);
        Type localVarReturnType = new TypeToken<PaymentCreateNewPaymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewPaymentAsync(PaymentCreateNewPaymentRequest paymentCreateNewPaymentRequest, final ApiCallback<PaymentCreateNewPaymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewPaymentValidateBeforeCall(paymentCreateNewPaymentRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentCreateNewPaymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewPaymentRequestBuilder {
        private final String businessId;
        private final String customerEmail;
        private final String incomingCurrency;
        private final String outgoingCurrency;
        private final String paymentType;
        private String accountName;
        private String accountNumber;
        private String bank;
        private String bankCode;
        private String coinprofileUsername;
        private String country;
        private Double incomingAmount;
        private Double outgoingAmount;
        private String rateKey;
        private String reference;

        private CreateNewPaymentRequestBuilder(String businessId, String customerEmail, String incomingCurrency, String outgoingCurrency, String paymentType) {
            this.businessId = businessId;
            this.customerEmail = customerEmail;
            this.incomingCurrency = incomingCurrency;
            this.outgoingCurrency = outgoingCurrency;
            this.paymentType = paymentType;
        }

        /**
         * Set accountName
         * @param accountName The account name. Required when paymentType is bank (optional)
         * @return CreateNewPaymentRequestBuilder
         */
        public CreateNewPaymentRequestBuilder accountName(String accountName) {
            this.accountName = accountName;
            return this;
        }
        
        /**
         * Set accountNumber
         * @param accountNumber The account number. Required when paymentType is bank (optional)
         * @return CreateNewPaymentRequestBuilder
         */
        public CreateNewPaymentRequestBuilder accountNumber(String accountNumber) {
            this.accountNumber = accountNumber;
            return this;
        }
        
        /**
         * Set bank
         * @param bank The bank name. Required when paymentType is bank (optional)
         * @return CreateNewPaymentRequestBuilder
         */
        public CreateNewPaymentRequestBuilder bank(String bank) {
            this.bank = bank;
            return this;
        }
        
        /**
         * Set bankCode
         * @param bankCode The bank code. Required when paymentType is bank (optional)
         * @return CreateNewPaymentRequestBuilder
         */
        public CreateNewPaymentRequestBuilder bankCode(String bankCode) {
            this.bankCode = bankCode;
            return this;
        }
        
        /**
         * Set coinprofileUsername
         * @param coinprofileUsername The coinprofile username. Required when paymentType is profile (optional)
         * @return CreateNewPaymentRequestBuilder
         */
        public CreateNewPaymentRequestBuilder coinprofileUsername(String coinprofileUsername) {
            this.coinprofileUsername = coinprofileUsername;
            return this;
        }
        
        /**
         * Set country
         * @param country The country. Required when paymentType is bank (optional)
         * @return CreateNewPaymentRequestBuilder
         */
        public CreateNewPaymentRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set incomingAmount
         * @param incomingAmount The incoming amount (optional)
         * @return CreateNewPaymentRequestBuilder
         */
        public CreateNewPaymentRequestBuilder incomingAmount(Double incomingAmount) {
            this.incomingAmount = incomingAmount;
            return this;
        }
        
        /**
         * Set outgoingAmount
         * @param outgoingAmount The outgoing amount (optional)
         * @return CreateNewPaymentRequestBuilder
         */
        public CreateNewPaymentRequestBuilder outgoingAmount(Double outgoingAmount) {
            this.outgoingAmount = outgoingAmount;
            return this;
        }
        
        /**
         * Set rateKey
         * @param rateKey The rate key (optional)
         * @return CreateNewPaymentRequestBuilder
         */
        public CreateNewPaymentRequestBuilder rateKey(String rateKey) {
            this.rateKey = rateKey;
            return this;
        }
        
        /**
         * Set reference
         * @param reference The reference (optional)
         * @return CreateNewPaymentRequestBuilder
         */
        public CreateNewPaymentRequestBuilder reference(String reference) {
            this.reference = reference;
            return this;
        }
        
        /**
         * Build call for createNewPayment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PaymentCreateNewPaymentRequest paymentCreateNewPaymentRequest = buildBodyParams();
            return createNewPaymentCall(paymentCreateNewPaymentRequest, _callback);
        }

        private PaymentCreateNewPaymentRequest buildBodyParams() {
            PaymentCreateNewPaymentRequest paymentCreateNewPaymentRequest = new PaymentCreateNewPaymentRequest();
            paymentCreateNewPaymentRequest.accountName(this.accountName);
            paymentCreateNewPaymentRequest.accountNumber(this.accountNumber);
            paymentCreateNewPaymentRequest.bank(this.bank);
            paymentCreateNewPaymentRequest.bankCode(this.bankCode);
            paymentCreateNewPaymentRequest.businessId(this.businessId);
            paymentCreateNewPaymentRequest.coinprofileUsername(this.coinprofileUsername);
            paymentCreateNewPaymentRequest.country(this.country);
            paymentCreateNewPaymentRequest.customerEmail(this.customerEmail);
            paymentCreateNewPaymentRequest.incomingAmount(this.incomingAmount);
            paymentCreateNewPaymentRequest.incomingCurrency(this.incomingCurrency);
            paymentCreateNewPaymentRequest.outgoingAmount(this.outgoingAmount);
            paymentCreateNewPaymentRequest.outgoingCurrency(this.outgoingCurrency);
            paymentCreateNewPaymentRequest.paymentType(this.paymentType);
            paymentCreateNewPaymentRequest.rateKey(this.rateKey);
            paymentCreateNewPaymentRequest.reference(this.reference);
            return paymentCreateNewPaymentRequest;
        }

        /**
         * Execute createNewPayment request
         * @return PaymentCreateNewPaymentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public PaymentCreateNewPaymentResponse execute() throws ApiException {
            PaymentCreateNewPaymentRequest paymentCreateNewPaymentRequest = buildBodyParams();
            ApiResponse<PaymentCreateNewPaymentResponse> localVarResp = createNewPaymentWithHttpInfo(paymentCreateNewPaymentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewPayment request with HTTP info returned
         * @return ApiResponse&lt;PaymentCreateNewPaymentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentCreateNewPaymentResponse> executeWithHttpInfo() throws ApiException {
            PaymentCreateNewPaymentRequest paymentCreateNewPaymentRequest = buildBodyParams();
            return createNewPaymentWithHttpInfo(paymentCreateNewPaymentRequest);
        }

        /**
         * Execute createNewPayment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentCreateNewPaymentResponse> _callback) throws ApiException {
            PaymentCreateNewPaymentRequest paymentCreateNewPaymentRequest = buildBodyParams();
            return createNewPaymentAsync(paymentCreateNewPaymentRequest, _callback);
        }
    }

    /**
     * Create payment
     * Create a new payment
     * @param paymentCreateNewPaymentRequest  (required)
     * @return CreateNewPaymentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewPaymentRequestBuilder createNewPayment(String businessId, String customerEmail, String incomingCurrency, String outgoingCurrency, String paymentType) throws IllegalArgumentException {
        if (businessId == null) throw new IllegalArgumentException("\"businessId\" is required but got null");
            

        if (customerEmail == null) throw new IllegalArgumentException("\"customerEmail\" is required but got null");
            

        if (incomingCurrency == null) throw new IllegalArgumentException("\"incomingCurrency\" is required but got null");
            

        if (outgoingCurrency == null) throw new IllegalArgumentException("\"outgoingCurrency\" is required but got null");
            

        if (paymentType == null) throw new IllegalArgumentException("\"paymentType\" is required but got null");
            

        return new CreateNewPaymentRequestBuilder(businessId, customerEmail, incomingCurrency, outgoingCurrency, paymentType);
    }
    private okhttp3.Call getSingleCall(String paymentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment/{paymentId}"
            .replace("{" + "paymentId" + "}", localVarApiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "ApiUser", "UserVersion" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleValidateBeforeCall(String paymentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling getSingle(Async)");
        }

        return getSingleCall(paymentId, _callback);

    }


    private ApiResponse<PaymentGetSingleResponse> getSingleWithHttpInfo(String paymentId) throws ApiException {
        okhttp3.Call localVarCall = getSingleValidateBeforeCall(paymentId, null);
        Type localVarReturnType = new TypeToken<PaymentGetSingleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleAsync(String paymentId, final ApiCallback<PaymentGetSingleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleValidateBeforeCall(paymentId, _callback);
        Type localVarReturnType = new TypeToken<PaymentGetSingleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleRequestBuilder {
        private final String paymentId;

        private GetSingleRequestBuilder(String paymentId) {
            this.paymentId = paymentId;
        }

        /**
         * Build call for getSingle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleCall(paymentId, _callback);
        }


        /**
         * Execute getSingle request
         * @return PaymentGetSingleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public PaymentGetSingleResponse execute() throws ApiException {
            ApiResponse<PaymentGetSingleResponse> localVarResp = getSingleWithHttpInfo(paymentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingle request with HTTP info returned
         * @return ApiResponse&lt;PaymentGetSingleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentGetSingleResponse> executeWithHttpInfo() throws ApiException {
            return getSingleWithHttpInfo(paymentId);
        }

        /**
         * Execute getSingle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentGetSingleResponse> _callback) throws ApiException {
            return getSingleAsync(paymentId, _callback);
        }
    }

    /**
     * Get a single payment
     * Get a single payment
     * @param paymentId The ID of the created payment (required)
     * @return GetSingleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleRequestBuilder getSingle(String paymentId) throws IllegalArgumentException {
        if (paymentId == null) throw new IllegalArgumentException("\"paymentId\" is required but got null");
            

        return new GetSingleRequestBuilder(paymentId);
    }
    private okhttp3.Call resolveOverpaidTransactionCall(String id, String option, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment/resolve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (option != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("option", option));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resolveOverpaidTransactionValidateBeforeCall(String id, String option, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resolveOverpaidTransaction(Async)");
        }

        // verify the required parameter 'option' is set
        if (option == null) {
            throw new ApiException("Missing the required parameter 'option' when calling resolveOverpaidTransaction(Async)");
        }

        return resolveOverpaidTransactionCall(id, option, _callback);

    }


    private ApiResponse<PaymentResolveOverpaidTransactionResponse> resolveOverpaidTransactionWithHttpInfo(String id, String option) throws ApiException {
        okhttp3.Call localVarCall = resolveOverpaidTransactionValidateBeforeCall(id, option, null);
        Type localVarReturnType = new TypeToken<PaymentResolveOverpaidTransactionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call resolveOverpaidTransactionAsync(String id, String option, final ApiCallback<PaymentResolveOverpaidTransactionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resolveOverpaidTransactionValidateBeforeCall(id, option, _callback);
        Type localVarReturnType = new TypeToken<PaymentResolveOverpaidTransactionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ResolveOverpaidTransactionRequestBuilder {
        private final String id;
        private final String option;

        private ResolveOverpaidTransactionRequestBuilder(String id, String option) {
            this.id = id;
            this.option = option;
        }

        /**
         * Build call for resolveOverpaidTransaction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return resolveOverpaidTransactionCall(id, option, _callback);
        }


        /**
         * Execute resolveOverpaidTransaction request
         * @return PaymentResolveOverpaidTransactionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public PaymentResolveOverpaidTransactionResponse execute() throws ApiException {
            ApiResponse<PaymentResolveOverpaidTransactionResponse> localVarResp = resolveOverpaidTransactionWithHttpInfo(id, option);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute resolveOverpaidTransaction request with HTTP info returned
         * @return ApiResponse&lt;PaymentResolveOverpaidTransactionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PaymentResolveOverpaidTransactionResponse> executeWithHttpInfo() throws ApiException {
            return resolveOverpaidTransactionWithHttpInfo(id, option);
        }

        /**
         * Execute resolveOverpaidTransaction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PaymentResolveOverpaidTransactionResponse> _callback) throws ApiException {
            return resolveOverpaidTransactionAsync(id, option, _callback);
        }
    }

    /**
     * Resolve overpaid Transaction
     * Resolve overpaid Transaction
     * @param id The ID of the unresolved transaction (required)
     * @param option This is the way you want the transaction to be completed. Either refundExcess or PayAll option (required)
     * @return ResolveOverpaidTransactionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ResolveOverpaidTransactionRequestBuilder resolveOverpaidTransaction(String id, String option) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (option == null) throw new IllegalArgumentException("\"option\" is required but got null");
            

        return new ResolveOverpaidTransactionRequestBuilder(id, option);
    }
}
