/*
 * Coinprofile business API
 * Coinprofile business API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.MerchantsGetRecordResponse;
import com.konfigthis.client.model.MerchantsUpdateRecordRequest;
import com.konfigthis.client.model.MerchantsUpdateRecordResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MerchantsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MerchantsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MerchantsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getRecordCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/merchants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "ApiUser" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecordValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getRecordCall(_callback);

    }


    private ApiResponse<MerchantsGetRecordResponse> getRecordWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getRecordValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MerchantsGetRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRecordAsync(final ApiCallback<MerchantsGetRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecordValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MerchantsGetRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRecordRequestBuilder {

        private GetRecordRequestBuilder() {
        }

        /**
         * Build call for getRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRecordCall(_callback);
        }


        /**
         * Execute getRecord request
         * @return MerchantsGetRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public MerchantsGetRecordResponse execute() throws ApiException {
            ApiResponse<MerchantsGetRecordResponse> localVarResp = getRecordWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRecord request with HTTP info returned
         * @return ApiResponse&lt;MerchantsGetRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MerchantsGetRecordResponse> executeWithHttpInfo() throws ApiException {
            return getRecordWithHttpInfo();
        }

        /**
         * Execute getRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MerchantsGetRecordResponse> _callback) throws ApiException {
            return getRecordAsync(_callback);
        }
    }

    /**
     * Retrieve merchant record
     * Retrieves merchant record - username, email, callback URL, merchant logo, creditCurrency, API key expiry date-time
     * @return GetRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetRecordRequestBuilder getRecord() throws IllegalArgumentException {
        return new GetRecordRequestBuilder();
    }
    private okhttp3.Call updateRecordCall(MerchantsUpdateRecordRequest merchantsUpdateRecordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = merchantsUpdateRecordRequest;

        // create path and map variables
        String localVarPath = "/v1/merchants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "ApiUser" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRecordValidateBeforeCall(MerchantsUpdateRecordRequest merchantsUpdateRecordRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'merchantsUpdateRecordRequest' is set
        if (merchantsUpdateRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'merchantsUpdateRecordRequest' when calling updateRecord(Async)");
        }

        return updateRecordCall(merchantsUpdateRecordRequest, _callback);

    }


    private ApiResponse<MerchantsUpdateRecordResponse> updateRecordWithHttpInfo(MerchantsUpdateRecordRequest merchantsUpdateRecordRequest) throws ApiException {
        okhttp3.Call localVarCall = updateRecordValidateBeforeCall(merchantsUpdateRecordRequest, null);
        Type localVarReturnType = new TypeToken<MerchantsUpdateRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateRecordAsync(MerchantsUpdateRecordRequest merchantsUpdateRecordRequest, final ApiCallback<MerchantsUpdateRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRecordValidateBeforeCall(merchantsUpdateRecordRequest, _callback);
        Type localVarReturnType = new TypeToken<MerchantsUpdateRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRecordRequestBuilder {
        private String callbackUrl;
        private String creditCurrency;
        private String feeBearer;
        private String logo;

        private UpdateRecordRequestBuilder() {
        }

        /**
         * Set callbackUrl
         * @param callbackUrl Merchant callback URL. Webhook will be sent to this URL. (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder callbackUrl(String callbackUrl) {
            this.callbackUrl = callbackUrl;
            return this;
        }
        
        /**
         * Set creditCurrency
         * @param creditCurrency Merchants can set this property to their desired currency. Their balance on Ventogram will be credited with this currency when their users redeem voucher created on Ventogram. Conversion between different currencies will be performed at the rate which is obtainable at the time of redeeming the voucher. If this is not set by the merchant,  their balance will be credited with the currency used in creating the voucher. (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder creditCurrency(String creditCurrency) {
            this.creditCurrency = creditCurrency;
            return this;
        }
        
        /**
         * Set feeBearer
         * @param feeBearer Bearer of the voucher fee (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder feeBearer(String feeBearer) {
            this.feeBearer = feeBearer;
            return this;
        }
        
        /**
         * Set logo
         * @param logo Merchant logo URL (optional)
         * @return UpdateRecordRequestBuilder
         */
        public UpdateRecordRequestBuilder logo(String logo) {
            this.logo = logo;
            return this;
        }
        
        /**
         * Build call for updateRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MerchantsUpdateRecordRequest merchantsUpdateRecordRequest = buildBodyParams();
            return updateRecordCall(merchantsUpdateRecordRequest, _callback);
        }

        private MerchantsUpdateRecordRequest buildBodyParams() {
            MerchantsUpdateRecordRequest merchantsUpdateRecordRequest = new MerchantsUpdateRecordRequest();
            merchantsUpdateRecordRequest.callbackUrl(this.callbackUrl);
            if (this.creditCurrency != null)
            merchantsUpdateRecordRequest.creditCurrency(MerchantsUpdateRecordRequest.CreditCurrencyEnum.fromValue(this.creditCurrency));
            if (this.feeBearer != null)
            merchantsUpdateRecordRequest.feeBearer(MerchantsUpdateRecordRequest.FeeBearerEnum.fromValue(this.feeBearer));
            merchantsUpdateRecordRequest.logo(this.logo);
            return merchantsUpdateRecordRequest;
        }

        /**
         * Execute updateRecord request
         * @return MerchantsUpdateRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public MerchantsUpdateRecordResponse execute() throws ApiException {
            MerchantsUpdateRecordRequest merchantsUpdateRecordRequest = buildBodyParams();
            ApiResponse<MerchantsUpdateRecordResponse> localVarResp = updateRecordWithHttpInfo(merchantsUpdateRecordRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateRecord request with HTTP info returned
         * @return ApiResponse&lt;MerchantsUpdateRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MerchantsUpdateRecordResponse> executeWithHttpInfo() throws ApiException {
            MerchantsUpdateRecordRequest merchantsUpdateRecordRequest = buildBodyParams();
            return updateRecordWithHttpInfo(merchantsUpdateRecordRequest);
        }

        /**
         * Execute updateRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MerchantsUpdateRecordResponse> _callback) throws ApiException {
            MerchantsUpdateRecordRequest merchantsUpdateRecordRequest = buildBodyParams();
            return updateRecordAsync(merchantsUpdateRecordRequest, _callback);
        }
    }

    /**
     * Update merchant record
     * Updates merchant record
     * @param merchantsUpdateRecordRequest  (required)
     * @return UpdateRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRecordRequestBuilder updateRecord() throws IllegalArgumentException {
        return new UpdateRecordRequestBuilder();
    }
}
