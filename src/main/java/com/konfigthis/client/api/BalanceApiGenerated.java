/*
 * Coinprofile business API
 * Coinprofile business API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BalanceGetAccountBalance200Response;
import com.konfigthis.client.model.BalanceGetAccountBalanceResponse;
import com.konfigthis.client.model.BalanceTransferFundsRequest;
import com.konfigthis.client.model.BalanceTransferFundsResponse;
import com.konfigthis.client.model.BalanceWithdrawFundsRequest;
import com.konfigthis.client.model.BalanceWithdrawFundsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BalanceApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BalanceApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BalanceApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAccountBalanceCall(String currency, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "ApiUser" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountBalanceValidateBeforeCall(String currency, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling getAccountBalance(Async)");
        }

        return getAccountBalanceCall(currency, _callback);

    }


    private ApiResponse<BalanceGetAccountBalanceResponse> getAccountBalanceWithHttpInfo(String currency) throws ApiException {
        okhttp3.Call localVarCall = getAccountBalanceValidateBeforeCall(currency, null);
        Type localVarReturnType = new TypeToken<BalanceGetAccountBalanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAccountBalanceAsync(String currency, final ApiCallback<BalanceGetAccountBalanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountBalanceValidateBeforeCall(currency, _callback);
        Type localVarReturnType = new TypeToken<BalanceGetAccountBalanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAccountBalanceRequestBuilder {
        private final String currency;

        private GetAccountBalanceRequestBuilder(String currency) {
            this.currency = currency;
        }

        /**
         * Build call for getAccountBalance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAccountBalanceCall(currency, _callback);
        }


        /**
         * Execute getAccountBalance request
         * @return BalanceGetAccountBalanceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public BalanceGetAccountBalanceResponse execute() throws ApiException {
            ApiResponse<BalanceGetAccountBalanceResponse> localVarResp = getAccountBalanceWithHttpInfo(currency);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAccountBalance request with HTTP info returned
         * @return ApiResponse&lt;BalanceGetAccountBalanceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BalanceGetAccountBalanceResponse> executeWithHttpInfo() throws ApiException {
            return getAccountBalanceWithHttpInfo(currency);
        }

        /**
         * Execute getAccountBalance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BalanceGetAccountBalanceResponse> _callback) throws ApiException {
            return getAccountBalanceAsync(currency, _callback);
        }
    }

    /**
     * Retrieve merchant account balance
     * Retrieves account balance for the selected currency
     * @param currency One of supported currencies (required)
     * @return GetAccountBalanceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetAccountBalanceRequestBuilder getAccountBalance(String currency) throws IllegalArgumentException {
        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
            

        return new GetAccountBalanceRequestBuilder(currency);
    }
    private okhttp3.Call getAccountBalance_0Call(String currency, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "ApiUser", "UserVersion" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountBalance_0ValidateBeforeCall(String currency, final ApiCallback _callback) throws ApiException {
        return getAccountBalance_0Call(currency, _callback);

    }


    private ApiResponse<BalanceGetAccountBalance200Response> getAccountBalance_0WithHttpInfo(String currency) throws ApiException {
        okhttp3.Call localVarCall = getAccountBalance_0ValidateBeforeCall(currency, null);
        Type localVarReturnType = new TypeToken<BalanceGetAccountBalance200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAccountBalance_0Async(String currency, final ApiCallback<BalanceGetAccountBalance200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountBalance_0ValidateBeforeCall(currency, _callback);
        Type localVarReturnType = new TypeToken<BalanceGetAccountBalance200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAccountBalance0RequestBuilder {
        private String currency;

        private GetAccountBalance0RequestBuilder() {
        }

        /**
         * Set currency
         * @param currency Currency for which balance is to be retrieved. When this is not supplied, balance will be retrieved for all available currencies. (optional)
         * @return GetAccountBalance0RequestBuilder
         */
        public GetAccountBalance0RequestBuilder currency(String currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Build call for getAccountBalance_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAccountBalance_0Call(currency, _callback);
        }


        /**
         * Execute getAccountBalance_0 request
         * @return BalanceGetAccountBalance200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public BalanceGetAccountBalance200Response execute() throws ApiException {
            ApiResponse<BalanceGetAccountBalance200Response> localVarResp = getAccountBalance_0WithHttpInfo(currency);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAccountBalance_0 request with HTTP info returned
         * @return ApiResponse&lt;BalanceGetAccountBalance200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BalanceGetAccountBalance200Response> executeWithHttpInfo() throws ApiException {
            return getAccountBalance_0WithHttpInfo(currency);
        }

        /**
         * Execute getAccountBalance_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BalanceGetAccountBalance200Response> _callback) throws ApiException {
            return getAccountBalance_0Async(currency, _callback);
        }
    }

    /**
     * Retrieve user&#39;s account balance
     * Retrieves account balance for each currency
     * @return GetAccountBalance0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetAccountBalance0RequestBuilder getAccountBalance_0() throws IllegalArgumentException {
        return new GetAccountBalance0RequestBuilder();
    }
    private okhttp3.Call transferFundsCall(BalanceTransferFundsRequest balanceTransferFundsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = balanceTransferFundsRequest;

        // create path and map variables
        String localVarPath = "/balance/transfer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "ApiUser", "UserVersion" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferFundsValidateBeforeCall(BalanceTransferFundsRequest balanceTransferFundsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'balanceTransferFundsRequest' is set
        if (balanceTransferFundsRequest == null) {
            throw new ApiException("Missing the required parameter 'balanceTransferFundsRequest' when calling transferFunds(Async)");
        }

        return transferFundsCall(balanceTransferFundsRequest, _callback);

    }


    private ApiResponse<BalanceTransferFundsResponse> transferFundsWithHttpInfo(BalanceTransferFundsRequest balanceTransferFundsRequest) throws ApiException {
        okhttp3.Call localVarCall = transferFundsValidateBeforeCall(balanceTransferFundsRequest, null);
        Type localVarReturnType = new TypeToken<BalanceTransferFundsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call transferFundsAsync(BalanceTransferFundsRequest balanceTransferFundsRequest, final ApiCallback<BalanceTransferFundsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferFundsValidateBeforeCall(balanceTransferFundsRequest, _callback);
        Type localVarReturnType = new TypeToken<BalanceTransferFundsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TransferFundsRequestBuilder {
        private final String currency;
        private final String receiverUsername;
        private String amount;
        private String memo;
        private String otpType;
        private String token;

        private TransferFundsRequestBuilder(String currency, String receiverUsername) {
            this.currency = currency;
            this.receiverUsername = receiverUsername;
        }

        /**
         * Set amount
         * @param amount Amount to transfer. (optional)
         * @return TransferFundsRequestBuilder
         */
        public TransferFundsRequestBuilder amount(String amount) {
            this.amount = amount;
            return this;
        }
        
        /**
         * Set memo
         * @param memo Transaction memo. (optional)
         * @return TransferFundsRequestBuilder
         */
        public TransferFundsRequestBuilder memo(String memo) {
            this.memo = memo;
            return this;
        }
        
        /**
         * Set otpType
         * @param otpType The type of OTP to be used. (optional)
         * @return TransferFundsRequestBuilder
         */
        public TransferFundsRequestBuilder otpType(String otpType) {
            this.otpType = otpType;
            return this;
        }
        
        /**
         * Set token
         * @param token The token to be used for OTP. (optional)
         * @return TransferFundsRequestBuilder
         */
        public TransferFundsRequestBuilder token(String token) {
            this.token = token;
            return this;
        }
        
        /**
         * Build call for transferFunds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BalanceTransferFundsRequest balanceTransferFundsRequest = buildBodyParams();
            return transferFundsCall(balanceTransferFundsRequest, _callback);
        }

        private BalanceTransferFundsRequest buildBodyParams() {
            BalanceTransferFundsRequest balanceTransferFundsRequest = new BalanceTransferFundsRequest();
            balanceTransferFundsRequest.amount(this.amount);
            if (this.currency != null)
            balanceTransferFundsRequest.currency(BalanceTransferFundsRequest.CurrencyEnum.fromValue(this.currency));
            balanceTransferFundsRequest.memo(this.memo);
            if (this.otpType != null)
            balanceTransferFundsRequest.otpType(BalanceTransferFundsRequest.OtpTypeEnum.fromValue(this.otpType));
            balanceTransferFundsRequest.receiverUsername(this.receiverUsername);
            balanceTransferFundsRequest.token(this.token);
            return balanceTransferFundsRequest;
        }

        /**
         * Execute transferFunds request
         * @return BalanceTransferFundsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public BalanceTransferFundsResponse execute() throws ApiException {
            BalanceTransferFundsRequest balanceTransferFundsRequest = buildBodyParams();
            ApiResponse<BalanceTransferFundsResponse> localVarResp = transferFundsWithHttpInfo(balanceTransferFundsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute transferFunds request with HTTP info returned
         * @return ApiResponse&lt;BalanceTransferFundsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BalanceTransferFundsResponse> executeWithHttpInfo() throws ApiException {
            BalanceTransferFundsRequest balanceTransferFundsRequest = buildBodyParams();
            return transferFundsWithHttpInfo(balanceTransferFundsRequest);
        }

        /**
         * Execute transferFunds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BalanceTransferFundsResponse> _callback) throws ApiException {
            BalanceTransferFundsRequest balanceTransferFundsRequest = buildBodyParams();
            return transferFundsAsync(balanceTransferFundsRequest, _callback);
        }
    }

    /**
     * Transfer funds
     * Transfer funds from user&#39;s balance to another user (fiat-to-fiat)
     * @param balanceTransferFundsRequest  (required)
     * @return TransferFundsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public TransferFundsRequestBuilder transferFunds(String currency, String receiverUsername) throws IllegalArgumentException {
        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
            

        if (receiverUsername == null) throw new IllegalArgumentException("\"receiverUsername\" is required but got null");
            

        return new TransferFundsRequestBuilder(currency, receiverUsername);
    }
    private okhttp3.Call withdrawFundsCall(BalanceWithdrawFundsRequest balanceWithdrawFundsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = balanceWithdrawFundsRequest;

        // create path and map variables
        String localVarPath = "/balance/withdraw";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "ApiUser", "UserVersion" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call withdrawFundsValidateBeforeCall(BalanceWithdrawFundsRequest balanceWithdrawFundsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'balanceWithdrawFundsRequest' is set
        if (balanceWithdrawFundsRequest == null) {
            throw new ApiException("Missing the required parameter 'balanceWithdrawFundsRequest' when calling withdrawFunds(Async)");
        }

        return withdrawFundsCall(balanceWithdrawFundsRequest, _callback);

    }


    private ApiResponse<BalanceWithdrawFundsResponse> withdrawFundsWithHttpInfo(BalanceWithdrawFundsRequest balanceWithdrawFundsRequest) throws ApiException {
        okhttp3.Call localVarCall = withdrawFundsValidateBeforeCall(balanceWithdrawFundsRequest, null);
        Type localVarReturnType = new TypeToken<BalanceWithdrawFundsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call withdrawFundsAsync(BalanceWithdrawFundsRequest balanceWithdrawFundsRequest, final ApiCallback<BalanceWithdrawFundsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = withdrawFundsValidateBeforeCall(balanceWithdrawFundsRequest, _callback);
        Type localVarReturnType = new TypeToken<BalanceWithdrawFundsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class WithdrawFundsRequestBuilder {
        private final String accountName;
        private final String accountNumber;
        private final String amount;
        private final String bank;
        private final String bankCode;
        private final String currency;
        private final String otpType;
        private String token;

        private WithdrawFundsRequestBuilder(String accountName, String accountNumber, String amount, String bank, String bankCode, String currency, String otpType) {
            this.accountName = accountName;
            this.accountNumber = accountNumber;
            this.amount = amount;
            this.bank = bank;
            this.bankCode = bankCode;
            this.currency = currency;
            this.otpType = otpType;
        }

        /**
         * Set token
         * @param token The token to be used for OTP. (optional)
         * @return WithdrawFundsRequestBuilder
         */
        public WithdrawFundsRequestBuilder token(String token) {
            this.token = token;
            return this;
        }
        
        /**
         * Build call for withdrawFunds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BalanceWithdrawFundsRequest balanceWithdrawFundsRequest = buildBodyParams();
            return withdrawFundsCall(balanceWithdrawFundsRequest, _callback);
        }

        private BalanceWithdrawFundsRequest buildBodyParams() {
            BalanceWithdrawFundsRequest balanceWithdrawFundsRequest = new BalanceWithdrawFundsRequest();
            balanceWithdrawFundsRequest.accountName(this.accountName);
            balanceWithdrawFundsRequest.accountNumber(this.accountNumber);
            balanceWithdrawFundsRequest.amount(this.amount);
            balanceWithdrawFundsRequest.bank(this.bank);
            balanceWithdrawFundsRequest.bankCode(this.bankCode);
            balanceWithdrawFundsRequest.currency(this.currency);
            if (this.otpType != null)
            balanceWithdrawFundsRequest.otpType(BalanceWithdrawFundsRequest.OtpTypeEnum.fromValue(this.otpType));
            balanceWithdrawFundsRequest.token(this.token);
            return balanceWithdrawFundsRequest;
        }

        /**
         * Execute withdrawFunds request
         * @return BalanceWithdrawFundsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public BalanceWithdrawFundsResponse execute() throws ApiException {
            BalanceWithdrawFundsRequest balanceWithdrawFundsRequest = buildBodyParams();
            ApiResponse<BalanceWithdrawFundsResponse> localVarResp = withdrawFundsWithHttpInfo(balanceWithdrawFundsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute withdrawFunds request with HTTP info returned
         * @return ApiResponse&lt;BalanceWithdrawFundsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BalanceWithdrawFundsResponse> executeWithHttpInfo() throws ApiException {
            BalanceWithdrawFundsRequest balanceWithdrawFundsRequest = buildBodyParams();
            return withdrawFundsWithHttpInfo(balanceWithdrawFundsRequest);
        }

        /**
         * Execute withdrawFunds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BalanceWithdrawFundsResponse> _callback) throws ApiException {
            BalanceWithdrawFundsRequest balanceWithdrawFundsRequest = buildBodyParams();
            return withdrawFundsAsync(balanceWithdrawFundsRequest, _callback);
        }
    }

    /**
     * Withdraw balance
     * Withdraw funds from the user&#39;s balance
     * @param balanceWithdrawFundsRequest  (required)
     * @return WithdrawFundsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public WithdrawFundsRequestBuilder withdrawFunds(String accountName, String accountNumber, String amount, String bank, String bankCode, String currency, String otpType) throws IllegalArgumentException {
        if (accountName == null) throw new IllegalArgumentException("\"accountName\" is required but got null");
            

        if (accountNumber == null) throw new IllegalArgumentException("\"accountNumber\" is required but got null");
            

        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
            

        if (bank == null) throw new IllegalArgumentException("\"bank\" is required but got null");
            

        if (bankCode == null) throw new IllegalArgumentException("\"bankCode\" is required but got null");
            

        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
            

        if (otpType == null) throw new IllegalArgumentException("\"otpType\" is required but got null");
            

        return new WithdrawFundsRequestBuilder(accountName, accountNumber, amount, bank, bankCode, currency, otpType);
    }
}
