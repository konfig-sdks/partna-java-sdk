/*
 * Coinprofile business API
 * Coinprofile business API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.VoucherCreatePaymentRequest;
import com.konfigthis.client.model.VoucherCreatePaymentResponse;
import com.konfigthis.client.model.VoucherGetMultipleRecordsResponse;
import com.konfigthis.client.model.VoucherGetRecordResponse;
import com.konfigthis.client.model.VoucherRedeemAndWithdrawRequest;
import com.konfigthis.client.model.VoucherRedeemAndWithdrawResponse;
import com.konfigthis.client.model.VoucherRedeemExistingUnusedRequest;
import com.konfigthis.client.model.VoucherRedeemExistingUnusedResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VoucherApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VoucherApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VoucherApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createPaymentCall(VoucherCreatePaymentRequest voucherCreatePaymentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = voucherCreatePaymentRequest;

        // create path and map variables
        String localVarPath = "/v1/vouchers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "ApiUser" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPaymentValidateBeforeCall(VoucherCreatePaymentRequest voucherCreatePaymentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voucherCreatePaymentRequest' is set
        if (voucherCreatePaymentRequest == null) {
            throw new ApiException("Missing the required parameter 'voucherCreatePaymentRequest' when calling createPayment(Async)");
        }

        return createPaymentCall(voucherCreatePaymentRequest, _callback);

    }


    private ApiResponse<VoucherCreatePaymentResponse> createPaymentWithHttpInfo(VoucherCreatePaymentRequest voucherCreatePaymentRequest) throws ApiException {
        okhttp3.Call localVarCall = createPaymentValidateBeforeCall(voucherCreatePaymentRequest, null);
        Type localVarReturnType = new TypeToken<VoucherCreatePaymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPaymentAsync(VoucherCreatePaymentRequest voucherCreatePaymentRequest, final ApiCallback<VoucherCreatePaymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPaymentValidateBeforeCall(voucherCreatePaymentRequest, _callback);
        Type localVarReturnType = new TypeToken<VoucherCreatePaymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePaymentRequestBuilder {
        private final Integer amount;
        private final String currency;
        private final String email;
        private final String fullname;
        private String rateKey;

        private CreatePaymentRequestBuilder(Integer amount, String currency, String email, String fullname) {
            this.amount = amount;
            this.currency = currency;
            this.email = email;
            this.fullname = fullname;
        }

        /**
         * Set rateKey
         * @param rateKey This is a Ventogram-signed rate key. If provided when a voucher is created, the conversion will use the rate signed with this key if it is valid at the time of redeeming a voucher. Conversion will use the current rate if key has expired. (optional)
         * @return CreatePaymentRequestBuilder
         */
        public CreatePaymentRequestBuilder rateKey(String rateKey) {
            this.rateKey = rateKey;
            return this;
        }
        
        /**
         * Build call for createPayment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VoucherCreatePaymentRequest voucherCreatePaymentRequest = buildBodyParams();
            return createPaymentCall(voucherCreatePaymentRequest, _callback);
        }

        private VoucherCreatePaymentRequest buildBodyParams() {
            VoucherCreatePaymentRequest voucherCreatePaymentRequest = new VoucherCreatePaymentRequest();
            voucherCreatePaymentRequest.amount(this.amount);
            if (this.currency != null)
            voucherCreatePaymentRequest.currency(VoucherCreatePaymentRequest.CurrencyEnum.fromValue(this.currency));
            voucherCreatePaymentRequest.email(this.email);
            voucherCreatePaymentRequest.fullname(this.fullname);
            voucherCreatePaymentRequest.rateKey(this.rateKey);
            return voucherCreatePaymentRequest;
        }

        /**
         * Execute createPayment request
         * @return VoucherCreatePaymentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public VoucherCreatePaymentResponse execute() throws ApiException {
            VoucherCreatePaymentRequest voucherCreatePaymentRequest = buildBodyParams();
            ApiResponse<VoucherCreatePaymentResponse> localVarResp = createPaymentWithHttpInfo(voucherCreatePaymentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPayment request with HTTP info returned
         * @return ApiResponse&lt;VoucherCreatePaymentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VoucherCreatePaymentResponse> executeWithHttpInfo() throws ApiException {
            VoucherCreatePaymentRequest voucherCreatePaymentRequest = buildBodyParams();
            return createPaymentWithHttpInfo(voucherCreatePaymentRequest);
        }

        /**
         * Execute createPayment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VoucherCreatePaymentResponse> _callback) throws ApiException {
            VoucherCreatePaymentRequest voucherCreatePaymentRequest = buildBodyParams();
            return createPaymentAsync(voucherCreatePaymentRequest, _callback);
        }
    }

    /**
     * Create a new voucher payment
     * Creates a new voucher payment for a user
     * @param voucherCreatePaymentRequest  (required)
     * @return CreatePaymentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CreatePaymentRequestBuilder createPayment(Integer amount, String currency, String email, String fullname) throws IllegalArgumentException {
        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
            

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (fullname == null) throw new IllegalArgumentException("\"fullname\" is required but got null");
            

        return new CreatePaymentRequestBuilder(amount, currency, email, fullname);
    }
    private okhttp3.Call getMultipleRecordsCall(Double page, Double pageSize, String paymentStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/voucher/get-many";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (paymentStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paymentStatus", paymentStatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "ApiUser" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMultipleRecordsValidateBeforeCall(Double page, Double pageSize, String paymentStatus, final ApiCallback _callback) throws ApiException {
        return getMultipleRecordsCall(page, pageSize, paymentStatus, _callback);

    }


    private ApiResponse<VoucherGetMultipleRecordsResponse> getMultipleRecordsWithHttpInfo(Double page, Double pageSize, String paymentStatus) throws ApiException {
        okhttp3.Call localVarCall = getMultipleRecordsValidateBeforeCall(page, pageSize, paymentStatus, null);
        Type localVarReturnType = new TypeToken<VoucherGetMultipleRecordsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMultipleRecordsAsync(Double page, Double pageSize, String paymentStatus, final ApiCallback<VoucherGetMultipleRecordsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMultipleRecordsValidateBeforeCall(page, pageSize, paymentStatus, _callback);
        Type localVarReturnType = new TypeToken<VoucherGetMultipleRecordsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMultipleRecordsRequestBuilder {
        private Double page;
        private Double pageSize;
        private String paymentStatus;

        private GetMultipleRecordsRequestBuilder() {
        }

        /**
         * Set page
         * @param page Defaults to 1. This is the current page being requested relative to size of a page (optional)
         * @return GetMultipleRecordsRequestBuilder
         */
        public GetMultipleRecordsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize The number of items to be retured per page (optional)
         * @return GetMultipleRecordsRequestBuilder
         */
        public GetMultipleRecordsRequestBuilder pageSize(Double pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set paymentStatus
         * @param paymentStatus Voucher payment status (optional)
         * @return GetMultipleRecordsRequestBuilder
         */
        public GetMultipleRecordsRequestBuilder paymentStatus(String paymentStatus) {
            this.paymentStatus = paymentStatus;
            return this;
        }
        
        /**
         * Build call for getMultipleRecords
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMultipleRecordsCall(page, pageSize, paymentStatus, _callback);
        }


        /**
         * Execute getMultipleRecords request
         * @return VoucherGetMultipleRecordsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public VoucherGetMultipleRecordsResponse execute() throws ApiException {
            ApiResponse<VoucherGetMultipleRecordsResponse> localVarResp = getMultipleRecordsWithHttpInfo(page, pageSize, paymentStatus);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMultipleRecords request with HTTP info returned
         * @return ApiResponse&lt;VoucherGetMultipleRecordsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VoucherGetMultipleRecordsResponse> executeWithHttpInfo() throws ApiException {
            return getMultipleRecordsWithHttpInfo(page, pageSize, paymentStatus);
        }

        /**
         * Execute getMultipleRecords request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VoucherGetMultipleRecordsResponse> _callback) throws ApiException {
            return getMultipleRecordsAsync(page, pageSize, paymentStatus, _callback);
        }
    }

    /**
     * Get multiple records
     * Retrieves a collection of voucher records, sorted in descending order by their creation date.
     * @return GetMultipleRecordsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetMultipleRecordsRequestBuilder getMultipleRecords() throws IllegalArgumentException {
        return new GetMultipleRecordsRequestBuilder();
    }
    private okhttp3.Call getRecordCall(String id, String memo, String accountNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vouchers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (memo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("memo", memo));
        }

        if (accountNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountNumber", accountNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "ApiUser" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecordValidateBeforeCall(String id, String memo, String accountNumber, final ApiCallback _callback) throws ApiException {
        return getRecordCall(id, memo, accountNumber, _callback);

    }


    private ApiResponse<VoucherGetRecordResponse> getRecordWithHttpInfo(String id, String memo, String accountNumber) throws ApiException {
        okhttp3.Call localVarCall = getRecordValidateBeforeCall(id, memo, accountNumber, null);
        Type localVarReturnType = new TypeToken<VoucherGetRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRecordAsync(String id, String memo, String accountNumber, final ApiCallback<VoucherGetRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecordValidateBeforeCall(id, memo, accountNumber, _callback);
        Type localVarReturnType = new TypeToken<VoucherGetRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRecordRequestBuilder {
        private String id;
        private String memo;
        private String accountNumber;

        private GetRecordRequestBuilder() {
        }

        /**
         * Set id
         * @param id Voucher id (optional)
         * @return GetRecordRequestBuilder
         */
        public GetRecordRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set memo
         * @param memo Voucher memo or reference number (optional)
         * @return GetRecordRequestBuilder
         */
        public GetRecordRequestBuilder memo(String memo) {
            this.memo = memo;
            return this;
        }
        
        /**
         * Set accountNumber
         * @param accountNumber The account number used to pay for voucher (optional)
         * @return GetRecordRequestBuilder
         */
        public GetRecordRequestBuilder accountNumber(String accountNumber) {
            this.accountNumber = accountNumber;
            return this;
        }
        
        /**
         * Build call for getRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRecordCall(id, memo, accountNumber, _callback);
        }


        /**
         * Execute getRecord request
         * @return VoucherGetRecordResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public VoucherGetRecordResponse execute() throws ApiException {
            ApiResponse<VoucherGetRecordResponse> localVarResp = getRecordWithHttpInfo(id, memo, accountNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRecord request with HTTP info returned
         * @return ApiResponse&lt;VoucherGetRecordResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VoucherGetRecordResponse> executeWithHttpInfo() throws ApiException {
            return getRecordWithHttpInfo(id, memo, accountNumber);
        }

        /**
         * Execute getRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VoucherGetRecordResponse> _callback) throws ApiException {
            return getRecordAsync(id, memo, accountNumber, _callback);
        }
    }

    /**
     * Retrieve voucher record
     * Retrieves an existing voucher record(s). When no query param is provided, all the voucher record for the merchant will be returned. If accountNumber field is provided in the query, all the voucher records associated with the given accountNumber for the merchant will be returned.
     * @return GetRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetRecordRequestBuilder getRecord() throws IllegalArgumentException {
        return new GetRecordRequestBuilder();
    }
    private okhttp3.Call redeemAndWithdrawCall(VoucherRedeemAndWithdrawRequest voucherRedeemAndWithdrawRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = voucherRedeemAndWithdrawRequest;

        // create path and map variables
        String localVarPath = "/v1/voucher";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "ApiUser" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call redeemAndWithdrawValidateBeforeCall(VoucherRedeemAndWithdrawRequest voucherRedeemAndWithdrawRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voucherRedeemAndWithdrawRequest' is set
        if (voucherRedeemAndWithdrawRequest == null) {
            throw new ApiException("Missing the required parameter 'voucherRedeemAndWithdrawRequest' when calling redeemAndWithdraw(Async)");
        }

        return redeemAndWithdrawCall(voucherRedeemAndWithdrawRequest, _callback);

    }


    private ApiResponse<VoucherRedeemAndWithdrawResponse> redeemAndWithdrawWithHttpInfo(VoucherRedeemAndWithdrawRequest voucherRedeemAndWithdrawRequest) throws ApiException {
        okhttp3.Call localVarCall = redeemAndWithdrawValidateBeforeCall(voucherRedeemAndWithdrawRequest, null);
        Type localVarReturnType = new TypeToken<VoucherRedeemAndWithdrawResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call redeemAndWithdrawAsync(VoucherRedeemAndWithdrawRequest voucherRedeemAndWithdrawRequest, final ApiCallback<VoucherRedeemAndWithdrawResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = redeemAndWithdrawValidateBeforeCall(voucherRedeemAndWithdrawRequest, _callback);
        Type localVarReturnType = new TypeToken<VoucherRedeemAndWithdrawResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RedeemAndWithdrawRequestBuilder {
        private final String cryptoAddress;
        private final String currency;
        private final String email;
        private final String network;
        private final String voucherCode;
        private String merchantFee;
        private String rateKey;

        private RedeemAndWithdrawRequestBuilder(String cryptoAddress, String currency, String email, String network, String voucherCode) {
            this.cryptoAddress = cryptoAddress;
            this.currency = currency;
            this.email = email;
            this.network = network;
            this.voucherCode = voucherCode;
        }

        /**
         * Set merchantFee
         * @param merchantFee In USD (optional) with a precision of 2 decimal places (max). Can be supplied if the merchant want to withdraw a portion of the voucher amount into their Ventogram balance. This must be a fraction or all of voucher value (ie received amount - voucher fee) (optional)
         * @return RedeemAndWithdrawRequestBuilder
         */
        public RedeemAndWithdrawRequestBuilder merchantFee(String merchantFee) {
            this.merchantFee = merchantFee;
            return this;
        }
        
        /**
         * Set rateKey
         * @param rateKey This is a Ventogram-signed rate key. This will be returned in response if the signed rate was used for conversion. (optional)
         * @return RedeemAndWithdrawRequestBuilder
         */
        public RedeemAndWithdrawRequestBuilder rateKey(String rateKey) {
            this.rateKey = rateKey;
            return this;
        }
        
        /**
         * Build call for redeemAndWithdraw
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VoucherRedeemAndWithdrawRequest voucherRedeemAndWithdrawRequest = buildBodyParams();
            return redeemAndWithdrawCall(voucherRedeemAndWithdrawRequest, _callback);
        }

        private VoucherRedeemAndWithdrawRequest buildBodyParams() {
            VoucherRedeemAndWithdrawRequest voucherRedeemAndWithdrawRequest = new VoucherRedeemAndWithdrawRequest();
            voucherRedeemAndWithdrawRequest.cryptoAddress(this.cryptoAddress);
            if (this.currency != null)
            voucherRedeemAndWithdrawRequest.currency(VoucherRedeemAndWithdrawRequest.CurrencyEnum.fromValue(this.currency));
            voucherRedeemAndWithdrawRequest.email(this.email);
            voucherRedeemAndWithdrawRequest.merchantFee(this.merchantFee);
            voucherRedeemAndWithdrawRequest.network(this.network);
            voucherRedeemAndWithdrawRequest.rateKey(this.rateKey);
            voucherRedeemAndWithdrawRequest.voucherCode(this.voucherCode);
            return voucherRedeemAndWithdrawRequest;
        }

        /**
         * Execute redeemAndWithdraw request
         * @return VoucherRedeemAndWithdrawResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public VoucherRedeemAndWithdrawResponse execute() throws ApiException {
            VoucherRedeemAndWithdrawRequest voucherRedeemAndWithdrawRequest = buildBodyParams();
            ApiResponse<VoucherRedeemAndWithdrawResponse> localVarResp = redeemAndWithdrawWithHttpInfo(voucherRedeemAndWithdrawRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute redeemAndWithdraw request with HTTP info returned
         * @return ApiResponse&lt;VoucherRedeemAndWithdrawResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VoucherRedeemAndWithdrawResponse> executeWithHttpInfo() throws ApiException {
            VoucherRedeemAndWithdrawRequest voucherRedeemAndWithdrawRequest = buildBodyParams();
            return redeemAndWithdrawWithHttpInfo(voucherRedeemAndWithdrawRequest);
        }

        /**
         * Execute redeemAndWithdraw request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VoucherRedeemAndWithdrawResponse> _callback) throws ApiException {
            VoucherRedeemAndWithdrawRequest voucherRedeemAndWithdrawRequest = buildBodyParams();
            return redeemAndWithdrawAsync(voucherRedeemAndWithdrawRequest, _callback);
        }
    }

    /**
     * Redeem and withdraw
     * Redeems an existing unused voucher and transfers crypto to the provided wallet address
     * @param voucherRedeemAndWithdrawRequest  (required)
     * @return RedeemAndWithdrawRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public RedeemAndWithdrawRequestBuilder redeemAndWithdraw(String cryptoAddress, String currency, String email, String network, String voucherCode) throws IllegalArgumentException {
        if (cryptoAddress == null) throw new IllegalArgumentException("\"cryptoAddress\" is required but got null");
            

        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
            

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (network == null) throw new IllegalArgumentException("\"network\" is required but got null");
            

        if (voucherCode == null) throw new IllegalArgumentException("\"voucherCode\" is required but got null");
            

        return new RedeemAndWithdrawRequestBuilder(cryptoAddress, currency, email, network, voucherCode);
    }
    private okhttp3.Call redeemExistingUnusedCall(VoucherRedeemExistingUnusedRequest voucherRedeemExistingUnusedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = voucherRedeemExistingUnusedRequest;

        // create path and map variables
        String localVarPath = "/v1/vouchers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "ApiUser" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call redeemExistingUnusedValidateBeforeCall(VoucherRedeemExistingUnusedRequest voucherRedeemExistingUnusedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voucherRedeemExistingUnusedRequest' is set
        if (voucherRedeemExistingUnusedRequest == null) {
            throw new ApiException("Missing the required parameter 'voucherRedeemExistingUnusedRequest' when calling redeemExistingUnused(Async)");
        }

        return redeemExistingUnusedCall(voucherRedeemExistingUnusedRequest, _callback);

    }


    private ApiResponse<VoucherRedeemExistingUnusedResponse> redeemExistingUnusedWithHttpInfo(VoucherRedeemExistingUnusedRequest voucherRedeemExistingUnusedRequest) throws ApiException {
        okhttp3.Call localVarCall = redeemExistingUnusedValidateBeforeCall(voucherRedeemExistingUnusedRequest, null);
        Type localVarReturnType = new TypeToken<VoucherRedeemExistingUnusedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call redeemExistingUnusedAsync(VoucherRedeemExistingUnusedRequest voucherRedeemExistingUnusedRequest, final ApiCallback<VoucherRedeemExistingUnusedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = redeemExistingUnusedValidateBeforeCall(voucherRedeemExistingUnusedRequest, _callback);
        Type localVarReturnType = new TypeToken<VoucherRedeemExistingUnusedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RedeemExistingUnusedRequestBuilder {
        private final String email;
        private final String voucherCode;

        private RedeemExistingUnusedRequestBuilder(String email, String voucherCode) {
            this.email = email;
            this.voucherCode = voucherCode;
        }

        /**
         * Build call for redeemExistingUnused
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VoucherRedeemExistingUnusedRequest voucherRedeemExistingUnusedRequest = buildBodyParams();
            return redeemExistingUnusedCall(voucherRedeemExistingUnusedRequest, _callback);
        }

        private VoucherRedeemExistingUnusedRequest buildBodyParams() {
            VoucherRedeemExistingUnusedRequest voucherRedeemExistingUnusedRequest = new VoucherRedeemExistingUnusedRequest();
            voucherRedeemExistingUnusedRequest.email(this.email);
            voucherRedeemExistingUnusedRequest.voucherCode(this.voucherCode);
            return voucherRedeemExistingUnusedRequest;
        }

        /**
         * Execute redeemExistingUnused request
         * @return VoucherRedeemExistingUnusedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public VoucherRedeemExistingUnusedResponse execute() throws ApiException {
            VoucherRedeemExistingUnusedRequest voucherRedeemExistingUnusedRequest = buildBodyParams();
            ApiResponse<VoucherRedeemExistingUnusedResponse> localVarResp = redeemExistingUnusedWithHttpInfo(voucherRedeemExistingUnusedRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute redeemExistingUnused request with HTTP info returned
         * @return ApiResponse&lt;VoucherRedeemExistingUnusedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VoucherRedeemExistingUnusedResponse> executeWithHttpInfo() throws ApiException {
            VoucherRedeemExistingUnusedRequest voucherRedeemExistingUnusedRequest = buildBodyParams();
            return redeemExistingUnusedWithHttpInfo(voucherRedeemExistingUnusedRequest);
        }

        /**
         * Execute redeemExistingUnused request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VoucherRedeemExistingUnusedResponse> _callback) throws ApiException {
            VoucherRedeemExistingUnusedRequest voucherRedeemExistingUnusedRequest = buildBodyParams();
            return redeemExistingUnusedAsync(voucherRedeemExistingUnusedRequest, _callback);
        }
    }

    /**
     * Redeem existing unused voucher
     * Redeems an existing unused voucher
     * @param voucherRedeemExistingUnusedRequest  (required)
     * @return RedeemExistingUnusedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public RedeemExistingUnusedRequestBuilder redeemExistingUnused(String email, String voucherCode) throws IllegalArgumentException {
        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (voucherCode == null) throw new IllegalArgumentException("\"voucherCode\" is required but got null");
            

        return new RedeemExistingUnusedRequestBuilder(email, voucherCode);
    }
}
