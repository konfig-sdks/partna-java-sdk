/*
 * Coinprofile business API
 * Coinprofile business API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * BalanceTransferFundsRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BalanceTransferFundsRequest {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  /**
   * Currency being sent.
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
 public enum CurrencyEnum {
    NGN("NGN"),
    
    USD("USD");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String value) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CurrencyEnum currency;

  public static final String SERIALIZED_NAME_MEMO = "memo";
  @SerializedName(SERIALIZED_NAME_MEMO)
  private String memo;

  /**
   * The type of OTP to be used.
   */
  @JsonAdapter(OtpTypeEnum.Adapter.class)
 public enum OtpTypeEnum {
    OTP("otp"),
    
    TOTP("totp");

    private String value;

    OtpTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OtpTypeEnum fromValue(String value) {
      for (OtpTypeEnum b : OtpTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OtpTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OtpTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OtpTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OtpTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OTP_TYPE = "otpType";
  @SerializedName(SERIALIZED_NAME_OTP_TYPE)
  private OtpTypeEnum otpType;

  public static final String SERIALIZED_NAME_RECEIVER_USERNAME = "receiverUsername";
  @SerializedName(SERIALIZED_NAME_RECEIVER_USERNAME)
  private String receiverUsername;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public BalanceTransferFundsRequest() {
  }

  public BalanceTransferFundsRequest amount(String amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * Amount to transfer.
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Amount to transfer.")

  public String getAmount() {
    return amount;
  }


  public void setAmount(String amount) {
    
    
    
    this.amount = amount;
  }


  public BalanceTransferFundsRequest currency(CurrencyEnum currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * Currency being sent.
   * @return currency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Currency being sent.")

  public CurrencyEnum getCurrency() {
    return currency;
  }


  public void setCurrency(CurrencyEnum currency) {
    
    
    
    this.currency = currency;
  }


  public BalanceTransferFundsRequest memo(String memo) {
    
    
    
    
    this.memo = memo;
    return this;
  }

   /**
   * Transaction memo.
   * @return memo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Transaction memo.")

  public String getMemo() {
    return memo;
  }


  public void setMemo(String memo) {
    
    
    
    this.memo = memo;
  }


  public BalanceTransferFundsRequest otpType(OtpTypeEnum otpType) {
    
    
    
    
    this.otpType = otpType;
    return this;
  }

   /**
   * The type of OTP to be used.
   * @return otpType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of OTP to be used.")

  public OtpTypeEnum getOtpType() {
    return otpType;
  }


  public void setOtpType(OtpTypeEnum otpType) {
    
    
    
    this.otpType = otpType;
  }


  public BalanceTransferFundsRequest receiverUsername(String receiverUsername) {
    
    
    
    
    this.receiverUsername = receiverUsername;
    return this;
  }

   /**
   * Receiver&#39;s coinprofile username.
   * @return receiverUsername
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Receiver's coinprofile username.")

  public String getReceiverUsername() {
    return receiverUsername;
  }


  public void setReceiverUsername(String receiverUsername) {
    
    
    
    this.receiverUsername = receiverUsername;
  }


  public BalanceTransferFundsRequest token(String token) {
    
    
    
    
    this.token = token;
    return this;
  }

   /**
   * The token to be used for OTP.
   * @return token
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The token to be used for OTP.")

  public String getToken() {
    return token;
  }


  public void setToken(String token) {
    
    
    
    this.token = token;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BalanceTransferFundsRequest instance itself
   */
  public BalanceTransferFundsRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BalanceTransferFundsRequest balanceTransferFundsRequest = (BalanceTransferFundsRequest) o;
    return Objects.equals(this.amount, balanceTransferFundsRequest.amount) &&
        Objects.equals(this.currency, balanceTransferFundsRequest.currency) &&
        Objects.equals(this.memo, balanceTransferFundsRequest.memo) &&
        Objects.equals(this.otpType, balanceTransferFundsRequest.otpType) &&
        Objects.equals(this.receiverUsername, balanceTransferFundsRequest.receiverUsername) &&
        Objects.equals(this.token, balanceTransferFundsRequest.token)&&
        Objects.equals(this.additionalProperties, balanceTransferFundsRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, currency, memo, otpType, receiverUsername, token, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BalanceTransferFundsRequest {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    otpType: ").append(toIndentedString(otpType)).append("\n");
    sb.append("    receiverUsername: ").append(toIndentedString(receiverUsername)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("currency");
    openapiFields.add("memo");
    openapiFields.add("otpType");
    openapiFields.add("receiverUsername");
    openapiFields.add("token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("receiverUsername");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BalanceTransferFundsRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BalanceTransferFundsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BalanceTransferFundsRequest is not found in the empty JSON string", BalanceTransferFundsRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BalanceTransferFundsRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull()) && !jsonObj.get("amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("memo") != null && !jsonObj.get("memo").isJsonNull()) && !jsonObj.get("memo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memo").toString()));
      }
      if ((jsonObj.get("otpType") != null && !jsonObj.get("otpType").isJsonNull()) && !jsonObj.get("otpType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `otpType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("otpType").toString()));
      }
      if (!jsonObj.get("receiverUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverUsername").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BalanceTransferFundsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BalanceTransferFundsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BalanceTransferFundsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BalanceTransferFundsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BalanceTransferFundsRequest>() {
           @Override
           public void write(JsonWriter out, BalanceTransferFundsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BalanceTransferFundsRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BalanceTransferFundsRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BalanceTransferFundsRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BalanceTransferFundsRequest
  * @throws IOException if the JSON string is invalid with respect to BalanceTransferFundsRequest
  */
  public static BalanceTransferFundsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BalanceTransferFundsRequest.class);
  }

 /**
  * Convert an instance of BalanceTransferFundsRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

