/*
 * Coinprofile business API
 * Coinprofile business API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * VoucherGetMultipleRecordsResponseDataInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class VoucherGetMultipleRecordsResponseDataInner {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DATE_REDEEMED = "dateRedeemed";
  @SerializedName(SERIALIZED_NAME_DATE_REDEEMED)
  private OffsetDateTime dateRedeemed;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EXPECTED_AMOUNT = "expectedAmount";
  @SerializedName(SERIALIZED_NAME_EXPECTED_AMOUNT)
  private Double expectedAmount;

  public static final String SERIALIZED_NAME_FEE = "fee";
  @SerializedName(SERIALIZED_NAME_FEE)
  private Double fee;

  /**
   * Gets or Sets feeBearer
   */
  @JsonAdapter(FeeBearerEnum.Adapter.class)
 public enum FeeBearerEnum {
    CLIENT("client"),
    
    MERCHANT("merchant");

    private String value;

    FeeBearerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeeBearerEnum fromValue(String value) {
      for (FeeBearerEnum b : FeeBearerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeeBearerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeeBearerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeeBearerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeeBearerEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FEE_BEARER = "feeBearer";
  @SerializedName(SERIALIZED_NAME_FEE_BEARER)
  private FeeBearerEnum feeBearer;

  public static final String SERIALIZED_NAME_FULLNAME = "fullname";
  @SerializedName(SERIALIZED_NAME_FULLNAME)
  private String fullname;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MEMO = "memo";
  @SerializedName(SERIALIZED_NAME_MEMO)
  private String memo;

  public static final String SERIALIZED_NAME_MERCHANT = "merchant";
  @SerializedName(SERIALIZED_NAME_MERCHANT)
  private String merchant;

  public static final String SERIALIZED_NAME_PAID_AT = "paidAt";
  @SerializedName(SERIALIZED_NAME_PAID_AT)
  private OffsetDateTime paidAt;

  /**
   * Gets or Sets paymentStatus
   */
  @JsonAdapter(PaymentStatusEnum.Adapter.class)
 public enum PaymentStatusEnum {
    PAID("paid"),
    
    UNPAID("unpaid");

    private String value;

    PaymentStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentStatusEnum fromValue(String value) {
      for (PaymentStatusEnum b : PaymentStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_STATUS = "paymentStatus";
  @SerializedName(SERIALIZED_NAME_PAYMENT_STATUS)
  private PaymentStatusEnum paymentStatus;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private Double rate;

  public static final String SERIALIZED_NAME_RATE_KEY = "rateKey";
  @SerializedName(SERIALIZED_NAME_RATE_KEY)
  private String rateKey;

  public static final String SERIALIZED_NAME_RECEIVED_AMOUNT = "receivedAmount";
  @SerializedName(SERIALIZED_NAME_RECEIVED_AMOUNT)
  private Double receivedAmount;

  public static final String SERIALIZED_NAME_VOUCHER_CODE = "voucherCode";
  @SerializedName(SERIALIZED_NAME_VOUCHER_CODE)
  private String voucherCode;

  public VoucherGetMultipleRecordsResponseDataInner() {
  }

  public VoucherGetMultipleRecordsResponseDataInner amount(Double amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

  public VoucherGetMultipleRecordsResponseDataInner amount(Integer amount) {
    
    
    
    
    this.amount = amount.doubleValue();
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getAmount() {
    return amount;
  }


  public void setAmount(Double amount) {
    
    
    
    this.amount = amount;
  }


  public VoucherGetMultipleRecordsResponseDataInner createdAt(OffsetDateTime createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public VoucherGetMultipleRecordsResponseDataInner currency(String currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    
    this.currency = currency;
  }


  public VoucherGetMultipleRecordsResponseDataInner dateRedeemed(OffsetDateTime dateRedeemed) {
    
    
    
    
    this.dateRedeemed = dateRedeemed;
    return this;
  }

   /**
   * This is defined only if the voucher payment has been received
   * @return dateRedeemed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This is defined only if the voucher payment has been received")

  public OffsetDateTime getDateRedeemed() {
    return dateRedeemed;
  }


  public void setDateRedeemed(OffsetDateTime dateRedeemed) {
    
    
    
    this.dateRedeemed = dateRedeemed;
  }


  public VoucherGetMultipleRecordsResponseDataInner email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public VoucherGetMultipleRecordsResponseDataInner expectedAmount(Double expectedAmount) {
    
    
    
    
    this.expectedAmount = expectedAmount;
    return this;
  }

  public VoucherGetMultipleRecordsResponseDataInner expectedAmount(Integer expectedAmount) {
    
    
    
    
    this.expectedAmount = expectedAmount.doubleValue();
    return this;
  }

   /**
   * Get expectedAmount
   * @return expectedAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getExpectedAmount() {
    return expectedAmount;
  }


  public void setExpectedAmount(Double expectedAmount) {
    
    
    
    this.expectedAmount = expectedAmount;
  }


  public VoucherGetMultipleRecordsResponseDataInner fee(Double fee) {
    
    
    
    
    this.fee = fee;
    return this;
  }

  public VoucherGetMultipleRecordsResponseDataInner fee(Integer fee) {
    
    
    
    
    this.fee = fee.doubleValue();
    return this;
  }

   /**
   * Get fee
   * @return fee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getFee() {
    return fee;
  }


  public void setFee(Double fee) {
    
    
    
    this.fee = fee;
  }


  public VoucherGetMultipleRecordsResponseDataInner feeBearer(FeeBearerEnum feeBearer) {
    
    
    
    
    this.feeBearer = feeBearer;
    return this;
  }

   /**
   * Get feeBearer
   * @return feeBearer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FeeBearerEnum getFeeBearer() {
    return feeBearer;
  }


  public void setFeeBearer(FeeBearerEnum feeBearer) {
    
    
    
    this.feeBearer = feeBearer;
  }


  public VoucherGetMultipleRecordsResponseDataInner fullname(String fullname) {
    
    
    
    
    this.fullname = fullname;
    return this;
  }

   /**
   * Get fullname
   * @return fullname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFullname() {
    return fullname;
  }


  public void setFullname(String fullname) {
    
    
    
    this.fullname = fullname;
  }


  public VoucherGetMultipleRecordsResponseDataInner id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public VoucherGetMultipleRecordsResponseDataInner memo(String memo) {
    
    
    
    
    this.memo = memo;
    return this;
  }

   /**
   * Get memo
   * @return memo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMemo() {
    return memo;
  }


  public void setMemo(String memo) {
    
    
    
    this.memo = memo;
  }


  public VoucherGetMultipleRecordsResponseDataInner merchant(String merchant) {
    
    
    
    
    this.merchant = merchant;
    return this;
  }

   /**
   * Get merchant
   * @return merchant
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMerchant() {
    return merchant;
  }


  public void setMerchant(String merchant) {
    
    
    
    this.merchant = merchant;
  }


  public VoucherGetMultipleRecordsResponseDataInner paidAt(OffsetDateTime paidAt) {
    
    
    
    
    this.paidAt = paidAt;
    return this;
  }

   /**
   * This is defined only if the voucher payment has been received
   * @return paidAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This is defined only if the voucher payment has been received")

  public OffsetDateTime getPaidAt() {
    return paidAt;
  }


  public void setPaidAt(OffsetDateTime paidAt) {
    
    
    
    this.paidAt = paidAt;
  }


  public VoucherGetMultipleRecordsResponseDataInner paymentStatus(PaymentStatusEnum paymentStatus) {
    
    
    
    
    this.paymentStatus = paymentStatus;
    return this;
  }

   /**
   * Get paymentStatus
   * @return paymentStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentStatusEnum getPaymentStatus() {
    return paymentStatus;
  }


  public void setPaymentStatus(PaymentStatusEnum paymentStatus) {
    
    
    
    this.paymentStatus = paymentStatus;
  }


  public VoucherGetMultipleRecordsResponseDataInner rate(Double rate) {
    
    
    
    
    this.rate = rate;
    return this;
  }

  public VoucherGetMultipleRecordsResponseDataInner rate(Integer rate) {
    
    
    
    
    this.rate = rate.doubleValue();
    return this;
  }

   /**
   * This is defined only if the voucher has been paid and redeemed
   * @return rate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This is defined only if the voucher has been paid and redeemed")

  public Double getRate() {
    return rate;
  }


  public void setRate(Double rate) {
    
    
    
    this.rate = rate;
  }


  public VoucherGetMultipleRecordsResponseDataInner rateKey(String rateKey) {
    
    
    
    
    this.rateKey = rateKey;
    return this;
  }

   /**
   * This is defined only if the voucher was created using a valid rate key
   * @return rateKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This is defined only if the voucher was created using a valid rate key")

  public String getRateKey() {
    return rateKey;
  }


  public void setRateKey(String rateKey) {
    
    
    
    this.rateKey = rateKey;
  }


  public VoucherGetMultipleRecordsResponseDataInner receivedAmount(Double receivedAmount) {
    
    
    
    
    this.receivedAmount = receivedAmount;
    return this;
  }

  public VoucherGetMultipleRecordsResponseDataInner receivedAmount(Integer receivedAmount) {
    
    
    
    
    this.receivedAmount = receivedAmount.doubleValue();
    return this;
  }

   /**
   * This is defined only if the voucher payment has been received
   * @return receivedAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This is defined only if the voucher payment has been received")

  public Double getReceivedAmount() {
    return receivedAmount;
  }


  public void setReceivedAmount(Double receivedAmount) {
    
    
    
    this.receivedAmount = receivedAmount;
  }


  public VoucherGetMultipleRecordsResponseDataInner voucherCode(String voucherCode) {
    
    
    
    
    this.voucherCode = voucherCode;
    return this;
  }

   /**
   * This is defined only if the voucher payment has been received
   * @return voucherCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This is defined only if the voucher payment has been received")

  public String getVoucherCode() {
    return voucherCode;
  }


  public void setVoucherCode(String voucherCode) {
    
    
    
    this.voucherCode = voucherCode;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the VoucherGetMultipleRecordsResponseDataInner instance itself
   */
  public VoucherGetMultipleRecordsResponseDataInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VoucherGetMultipleRecordsResponseDataInner voucherGetMultipleRecordsResponseDataInner = (VoucherGetMultipleRecordsResponseDataInner) o;
    return Objects.equals(this.amount, voucherGetMultipleRecordsResponseDataInner.amount) &&
        Objects.equals(this.createdAt, voucherGetMultipleRecordsResponseDataInner.createdAt) &&
        Objects.equals(this.currency, voucherGetMultipleRecordsResponseDataInner.currency) &&
        Objects.equals(this.dateRedeemed, voucherGetMultipleRecordsResponseDataInner.dateRedeemed) &&
        Objects.equals(this.email, voucherGetMultipleRecordsResponseDataInner.email) &&
        Objects.equals(this.expectedAmount, voucherGetMultipleRecordsResponseDataInner.expectedAmount) &&
        Objects.equals(this.fee, voucherGetMultipleRecordsResponseDataInner.fee) &&
        Objects.equals(this.feeBearer, voucherGetMultipleRecordsResponseDataInner.feeBearer) &&
        Objects.equals(this.fullname, voucherGetMultipleRecordsResponseDataInner.fullname) &&
        Objects.equals(this.id, voucherGetMultipleRecordsResponseDataInner.id) &&
        Objects.equals(this.memo, voucherGetMultipleRecordsResponseDataInner.memo) &&
        Objects.equals(this.merchant, voucherGetMultipleRecordsResponseDataInner.merchant) &&
        Objects.equals(this.paidAt, voucherGetMultipleRecordsResponseDataInner.paidAt) &&
        Objects.equals(this.paymentStatus, voucherGetMultipleRecordsResponseDataInner.paymentStatus) &&
        Objects.equals(this.rate, voucherGetMultipleRecordsResponseDataInner.rate) &&
        Objects.equals(this.rateKey, voucherGetMultipleRecordsResponseDataInner.rateKey) &&
        Objects.equals(this.receivedAmount, voucherGetMultipleRecordsResponseDataInner.receivedAmount) &&
        Objects.equals(this.voucherCode, voucherGetMultipleRecordsResponseDataInner.voucherCode)&&
        Objects.equals(this.additionalProperties, voucherGetMultipleRecordsResponseDataInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, createdAt, currency, dateRedeemed, email, expectedAmount, fee, feeBearer, fullname, id, memo, merchant, paidAt, paymentStatus, rate, rateKey, receivedAmount, voucherCode, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VoucherGetMultipleRecordsResponseDataInner {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    dateRedeemed: ").append(toIndentedString(dateRedeemed)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    expectedAmount: ").append(toIndentedString(expectedAmount)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    feeBearer: ").append(toIndentedString(feeBearer)).append("\n");
    sb.append("    fullname: ").append(toIndentedString(fullname)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    merchant: ").append(toIndentedString(merchant)).append("\n");
    sb.append("    paidAt: ").append(toIndentedString(paidAt)).append("\n");
    sb.append("    paymentStatus: ").append(toIndentedString(paymentStatus)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    rateKey: ").append(toIndentedString(rateKey)).append("\n");
    sb.append("    receivedAmount: ").append(toIndentedString(receivedAmount)).append("\n");
    sb.append("    voucherCode: ").append(toIndentedString(voucherCode)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("createdAt");
    openapiFields.add("currency");
    openapiFields.add("dateRedeemed");
    openapiFields.add("email");
    openapiFields.add("expectedAmount");
    openapiFields.add("fee");
    openapiFields.add("feeBearer");
    openapiFields.add("fullname");
    openapiFields.add("id");
    openapiFields.add("memo");
    openapiFields.add("merchant");
    openapiFields.add("paidAt");
    openapiFields.add("paymentStatus");
    openapiFields.add("rate");
    openapiFields.add("rateKey");
    openapiFields.add("receivedAmount");
    openapiFields.add("voucherCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VoucherGetMultipleRecordsResponseDataInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VoucherGetMultipleRecordsResponseDataInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VoucherGetMultipleRecordsResponseDataInner is not found in the empty JSON string", VoucherGetMultipleRecordsResponseDataInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("feeBearer") != null && !jsonObj.get("feeBearer").isJsonNull()) && !jsonObj.get("feeBearer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feeBearer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feeBearer").toString()));
      }
      if ((jsonObj.get("fullname") != null && !jsonObj.get("fullname").isJsonNull()) && !jsonObj.get("fullname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullname").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("memo") != null && !jsonObj.get("memo").isJsonNull()) && !jsonObj.get("memo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memo").toString()));
      }
      if ((jsonObj.get("merchant") != null && !jsonObj.get("merchant").isJsonNull()) && !jsonObj.get("merchant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant").toString()));
      }
      if ((jsonObj.get("paymentStatus") != null && !jsonObj.get("paymentStatus").isJsonNull()) && !jsonObj.get("paymentStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentStatus").toString()));
      }
      if ((jsonObj.get("rateKey") != null && !jsonObj.get("rateKey").isJsonNull()) && !jsonObj.get("rateKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rateKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rateKey").toString()));
      }
      if ((jsonObj.get("voucherCode") != null && !jsonObj.get("voucherCode").isJsonNull()) && !jsonObj.get("voucherCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `voucherCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("voucherCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VoucherGetMultipleRecordsResponseDataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VoucherGetMultipleRecordsResponseDataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VoucherGetMultipleRecordsResponseDataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VoucherGetMultipleRecordsResponseDataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<VoucherGetMultipleRecordsResponseDataInner>() {
           @Override
           public void write(JsonWriter out, VoucherGetMultipleRecordsResponseDataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public VoucherGetMultipleRecordsResponseDataInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             VoucherGetMultipleRecordsResponseDataInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VoucherGetMultipleRecordsResponseDataInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VoucherGetMultipleRecordsResponseDataInner
  * @throws IOException if the JSON string is invalid with respect to VoucherGetMultipleRecordsResponseDataInner
  */
  public static VoucherGetMultipleRecordsResponseDataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VoucherGetMultipleRecordsResponseDataInner.class);
  }

 /**
  * Convert an instance of VoucherGetMultipleRecordsResponseDataInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

