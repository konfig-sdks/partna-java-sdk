/*
 * Coinprofile business API
 * Coinprofile business API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PaymentCreateNewPaymentResponseData
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PaymentCreateNewPaymentResponseData {
  public static final String SERIALIZED_NAME_ID = "_id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private String account;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_BUSINESS_ID = "businessId";
  @SerializedName(SERIALIZED_NAME_BUSINESS_ID)
  private String businessId;

  public static final String SERIALIZED_NAME_CONFIRMED_AMOUNT = "confirmedAmount";
  @SerializedName(SERIALIZED_NAME_CONFIRMED_AMOUNT)
  private Integer confirmedAmount;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CUSTOMER_EMAIL = "customerEmail";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_EMAIL)
  private String customerEmail;

  public static final String SERIALIZED_NAME_EXP_TIME = "expTime";
  @SerializedName(SERIALIZED_NAME_EXP_TIME)
  private String expTime;

  public static final String SERIALIZED_NAME_INCOMING_AMOUNT = "incomingAmount";
  @SerializedName(SERIALIZED_NAME_INCOMING_AMOUNT)
  private Integer incomingAmount;

  public static final String SERIALIZED_NAME_INCOMING_CURRENCY = "incomingCurrency";
  @SerializedName(SERIALIZED_NAME_INCOMING_CURRENCY)
  private String incomingCurrency;

  public static final String SERIALIZED_NAME_OUTGOING_AMOUNT = "outgoingAmount";
  @SerializedName(SERIALIZED_NAME_OUTGOING_AMOUNT)
  private Integer outgoingAmount;

  public static final String SERIALIZED_NAME_OUTGOING_CURRENCY = "outgoingCurrency";
  @SerializedName(SERIALIZED_NAME_OUTGOING_CURRENCY)
  private String outgoingCurrency;

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "paymentType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private String paymentType;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private Integer rate;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_SENDER_USERNAME = "senderUsername";
  @SerializedName(SERIALIZED_NAME_SENDER_USERNAME)
  private String senderUsername;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_THREAD_T_S = "threadTS";
  @SerializedName(SERIALIZED_NAME_THREAD_T_S)
  private String threadTS;

  public static final String SERIALIZED_NAME_UNCONFIRMED_AMOUNT = "unconfirmedAmount";
  @SerializedName(SERIALIZED_NAME_UNCONFIRMED_AMOUNT)
  private Integer unconfirmedAmount;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public PaymentCreateNewPaymentResponseData() {
  }

  public PaymentCreateNewPaymentResponseData id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public PaymentCreateNewPaymentResponseData account(String account) {
    
    
    
    
    this.account = account;
    return this;
  }

   /**
   * Get account
   * @return account
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAccount() {
    return account;
  }


  public void setAccount(String account) {
    
    
    
    this.account = account;
  }


  public PaymentCreateNewPaymentResponseData address(String address) {
    
    
    
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    
    
    
    this.address = address;
  }


  public PaymentCreateNewPaymentResponseData businessId(String businessId) {
    
    
    
    
    this.businessId = businessId;
    return this;
  }

   /**
   * Get businessId
   * @return businessId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBusinessId() {
    return businessId;
  }


  public void setBusinessId(String businessId) {
    
    
    
    this.businessId = businessId;
  }


  public PaymentCreateNewPaymentResponseData confirmedAmount(Integer confirmedAmount) {
    
    
    
    
    this.confirmedAmount = confirmedAmount;
    return this;
  }

   /**
   * Get confirmedAmount
   * @return confirmedAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getConfirmedAmount() {
    return confirmedAmount;
  }


  public void setConfirmedAmount(Integer confirmedAmount) {
    
    
    
    this.confirmedAmount = confirmedAmount;
  }


  public PaymentCreateNewPaymentResponseData createdAt(String createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public PaymentCreateNewPaymentResponseData customerEmail(String customerEmail) {
    
    
    
    
    this.customerEmail = customerEmail;
    return this;
  }

   /**
   * Get customerEmail
   * @return customerEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCustomerEmail() {
    return customerEmail;
  }


  public void setCustomerEmail(String customerEmail) {
    
    
    
    this.customerEmail = customerEmail;
  }


  public PaymentCreateNewPaymentResponseData expTime(String expTime) {
    
    
    
    
    this.expTime = expTime;
    return this;
  }

   /**
   * Get expTime
   * @return expTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExpTime() {
    return expTime;
  }


  public void setExpTime(String expTime) {
    
    
    
    this.expTime = expTime;
  }


  public PaymentCreateNewPaymentResponseData incomingAmount(Integer incomingAmount) {
    
    
    
    
    this.incomingAmount = incomingAmount;
    return this;
  }

   /**
   * Get incomingAmount
   * @return incomingAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getIncomingAmount() {
    return incomingAmount;
  }


  public void setIncomingAmount(Integer incomingAmount) {
    
    
    
    this.incomingAmount = incomingAmount;
  }


  public PaymentCreateNewPaymentResponseData incomingCurrency(String incomingCurrency) {
    
    
    
    
    this.incomingCurrency = incomingCurrency;
    return this;
  }

   /**
   * Get incomingCurrency
   * @return incomingCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIncomingCurrency() {
    return incomingCurrency;
  }


  public void setIncomingCurrency(String incomingCurrency) {
    
    
    
    this.incomingCurrency = incomingCurrency;
  }


  public PaymentCreateNewPaymentResponseData outgoingAmount(Integer outgoingAmount) {
    
    
    
    
    this.outgoingAmount = outgoingAmount;
    return this;
  }

   /**
   * Get outgoingAmount
   * @return outgoingAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getOutgoingAmount() {
    return outgoingAmount;
  }


  public void setOutgoingAmount(Integer outgoingAmount) {
    
    
    
    this.outgoingAmount = outgoingAmount;
  }


  public PaymentCreateNewPaymentResponseData outgoingCurrency(String outgoingCurrency) {
    
    
    
    
    this.outgoingCurrency = outgoingCurrency;
    return this;
  }

   /**
   * Get outgoingCurrency
   * @return outgoingCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOutgoingCurrency() {
    return outgoingCurrency;
  }


  public void setOutgoingCurrency(String outgoingCurrency) {
    
    
    
    this.outgoingCurrency = outgoingCurrency;
  }


  public PaymentCreateNewPaymentResponseData paymentType(String paymentType) {
    
    
    
    
    this.paymentType = paymentType;
    return this;
  }

   /**
   * Get paymentType
   * @return paymentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPaymentType() {
    return paymentType;
  }


  public void setPaymentType(String paymentType) {
    
    
    
    this.paymentType = paymentType;
  }


  public PaymentCreateNewPaymentResponseData rate(Integer rate) {
    
    
    
    
    this.rate = rate;
    return this;
  }

   /**
   * Get rate
   * @return rate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getRate() {
    return rate;
  }


  public void setRate(Integer rate) {
    
    
    
    this.rate = rate;
  }


  public PaymentCreateNewPaymentResponseData reference(String reference) {
    
    
    
    
    this.reference = reference;
    return this;
  }

   /**
   * Get reference
   * @return reference
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getReference() {
    return reference;
  }


  public void setReference(String reference) {
    
    
    
    this.reference = reference;
  }


  public PaymentCreateNewPaymentResponseData senderUsername(String senderUsername) {
    
    
    
    
    this.senderUsername = senderUsername;
    return this;
  }

   /**
   * Get senderUsername
   * @return senderUsername
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSenderUsername() {
    return senderUsername;
  }


  public void setSenderUsername(String senderUsername) {
    
    
    
    this.senderUsername = senderUsername;
  }


  public PaymentCreateNewPaymentResponseData state(String state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    
    
    
    this.state = state;
  }


  public PaymentCreateNewPaymentResponseData threadTS(String threadTS) {
    
    
    
    
    this.threadTS = threadTS;
    return this;
  }

   /**
   * Get threadTS
   * @return threadTS
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getThreadTS() {
    return threadTS;
  }


  public void setThreadTS(String threadTS) {
    
    
    
    this.threadTS = threadTS;
  }


  public PaymentCreateNewPaymentResponseData unconfirmedAmount(Integer unconfirmedAmount) {
    
    
    
    
    this.unconfirmedAmount = unconfirmedAmount;
    return this;
  }

   /**
   * Get unconfirmedAmount
   * @return unconfirmedAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getUnconfirmedAmount() {
    return unconfirmedAmount;
  }


  public void setUnconfirmedAmount(Integer unconfirmedAmount) {
    
    
    
    this.unconfirmedAmount = unconfirmedAmount;
  }


  public PaymentCreateNewPaymentResponseData updatedAt(String updatedAt) {
    
    
    
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(String updatedAt) {
    
    
    
    this.updatedAt = updatedAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PaymentCreateNewPaymentResponseData instance itself
   */
  public PaymentCreateNewPaymentResponseData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentCreateNewPaymentResponseData paymentCreateNewPaymentResponseData = (PaymentCreateNewPaymentResponseData) o;
    return Objects.equals(this.id, paymentCreateNewPaymentResponseData.id) &&
        Objects.equals(this.account, paymentCreateNewPaymentResponseData.account) &&
        Objects.equals(this.address, paymentCreateNewPaymentResponseData.address) &&
        Objects.equals(this.businessId, paymentCreateNewPaymentResponseData.businessId) &&
        Objects.equals(this.confirmedAmount, paymentCreateNewPaymentResponseData.confirmedAmount) &&
        Objects.equals(this.createdAt, paymentCreateNewPaymentResponseData.createdAt) &&
        Objects.equals(this.customerEmail, paymentCreateNewPaymentResponseData.customerEmail) &&
        Objects.equals(this.expTime, paymentCreateNewPaymentResponseData.expTime) &&
        Objects.equals(this.incomingAmount, paymentCreateNewPaymentResponseData.incomingAmount) &&
        Objects.equals(this.incomingCurrency, paymentCreateNewPaymentResponseData.incomingCurrency) &&
        Objects.equals(this.outgoingAmount, paymentCreateNewPaymentResponseData.outgoingAmount) &&
        Objects.equals(this.outgoingCurrency, paymentCreateNewPaymentResponseData.outgoingCurrency) &&
        Objects.equals(this.paymentType, paymentCreateNewPaymentResponseData.paymentType) &&
        Objects.equals(this.rate, paymentCreateNewPaymentResponseData.rate) &&
        Objects.equals(this.reference, paymentCreateNewPaymentResponseData.reference) &&
        Objects.equals(this.senderUsername, paymentCreateNewPaymentResponseData.senderUsername) &&
        Objects.equals(this.state, paymentCreateNewPaymentResponseData.state) &&
        Objects.equals(this.threadTS, paymentCreateNewPaymentResponseData.threadTS) &&
        Objects.equals(this.unconfirmedAmount, paymentCreateNewPaymentResponseData.unconfirmedAmount) &&
        Objects.equals(this.updatedAt, paymentCreateNewPaymentResponseData.updatedAt)&&
        Objects.equals(this.additionalProperties, paymentCreateNewPaymentResponseData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, account, address, businessId, confirmedAmount, createdAt, customerEmail, expTime, incomingAmount, incomingCurrency, outgoingAmount, outgoingCurrency, paymentType, rate, reference, senderUsername, state, threadTS, unconfirmedAmount, updatedAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentCreateNewPaymentResponseData {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    businessId: ").append(toIndentedString(businessId)).append("\n");
    sb.append("    confirmedAmount: ").append(toIndentedString(confirmedAmount)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customerEmail: ").append(toIndentedString(customerEmail)).append("\n");
    sb.append("    expTime: ").append(toIndentedString(expTime)).append("\n");
    sb.append("    incomingAmount: ").append(toIndentedString(incomingAmount)).append("\n");
    sb.append("    incomingCurrency: ").append(toIndentedString(incomingCurrency)).append("\n");
    sb.append("    outgoingAmount: ").append(toIndentedString(outgoingAmount)).append("\n");
    sb.append("    outgoingCurrency: ").append(toIndentedString(outgoingCurrency)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    senderUsername: ").append(toIndentedString(senderUsername)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    threadTS: ").append(toIndentedString(threadTS)).append("\n");
    sb.append("    unconfirmedAmount: ").append(toIndentedString(unconfirmedAmount)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_id");
    openapiFields.add("account");
    openapiFields.add("address");
    openapiFields.add("businessId");
    openapiFields.add("confirmedAmount");
    openapiFields.add("createdAt");
    openapiFields.add("customerEmail");
    openapiFields.add("expTime");
    openapiFields.add("incomingAmount");
    openapiFields.add("incomingCurrency");
    openapiFields.add("outgoingAmount");
    openapiFields.add("outgoingCurrency");
    openapiFields.add("paymentType");
    openapiFields.add("rate");
    openapiFields.add("reference");
    openapiFields.add("senderUsername");
    openapiFields.add("state");
    openapiFields.add("threadTS");
    openapiFields.add("unconfirmedAmount");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PaymentCreateNewPaymentResponseData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PaymentCreateNewPaymentResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentCreateNewPaymentResponseData is not found in the empty JSON string", PaymentCreateNewPaymentResponseData.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("_id") != null && !jsonObj.get("_id").isJsonNull()) && !jsonObj.get("_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_id").toString()));
      }
      if ((jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) && !jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("businessId") != null && !jsonObj.get("businessId").isJsonNull()) && !jsonObj.get("businessId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessId").toString()));
      }
      if ((jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) && !jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      if ((jsonObj.get("customerEmail") != null && !jsonObj.get("customerEmail").isJsonNull()) && !jsonObj.get("customerEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerEmail").toString()));
      }
      if ((jsonObj.get("expTime") != null && !jsonObj.get("expTime").isJsonNull()) && !jsonObj.get("expTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expTime").toString()));
      }
      if ((jsonObj.get("incomingCurrency") != null && !jsonObj.get("incomingCurrency").isJsonNull()) && !jsonObj.get("incomingCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incomingCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incomingCurrency").toString()));
      }
      if ((jsonObj.get("outgoingCurrency") != null && !jsonObj.get("outgoingCurrency").isJsonNull()) && !jsonObj.get("outgoingCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outgoingCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outgoingCurrency").toString()));
      }
      if ((jsonObj.get("paymentType") != null && !jsonObj.get("paymentType").isJsonNull()) && !jsonObj.get("paymentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentType").toString()));
      }
      if ((jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) && !jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      if ((jsonObj.get("senderUsername") != null && !jsonObj.get("senderUsername").isJsonNull()) && !jsonObj.get("senderUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `senderUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("senderUsername").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("threadTS") != null && !jsonObj.get("threadTS").isJsonNull()) && !jsonObj.get("threadTS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threadTS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threadTS").toString()));
      }
      if ((jsonObj.get("updatedAt") != null && !jsonObj.get("updatedAt").isJsonNull()) && !jsonObj.get("updatedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedAt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentCreateNewPaymentResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentCreateNewPaymentResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentCreateNewPaymentResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentCreateNewPaymentResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentCreateNewPaymentResponseData>() {
           @Override
           public void write(JsonWriter out, PaymentCreateNewPaymentResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentCreateNewPaymentResponseData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PaymentCreateNewPaymentResponseData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentCreateNewPaymentResponseData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentCreateNewPaymentResponseData
  * @throws IOException if the JSON string is invalid with respect to PaymentCreateNewPaymentResponseData
  */
  public static PaymentCreateNewPaymentResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentCreateNewPaymentResponseData.class);
  }

 /**
  * Convert an instance of PaymentCreateNewPaymentResponseData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

