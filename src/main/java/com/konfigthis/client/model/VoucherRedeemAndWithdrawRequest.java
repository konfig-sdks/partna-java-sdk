/*
 * Coinprofile business API
 * Coinprofile business API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * VoucherRedeemAndWithdrawRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class VoucherRedeemAndWithdrawRequest {
  public static final String SERIALIZED_NAME_CRYPTO_ADDRESS = "cryptoAddress";
  @SerializedName(SERIALIZED_NAME_CRYPTO_ADDRESS)
  private String cryptoAddress;

  /**
   * Cryptocurrency to send to the provided wallet details
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
 public enum CurrencyEnum {
    USDC("USDC"),
    
    USDT("USDT");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String value) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CurrencyEnum currency;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  /**
   * In USD (optional). Can be supplied if the merchant want to withdraw a portion of the voucher amount into their Ventogram balance. This must be a fraction or all of voucher value (ie received amount - voucher fee)
   */
  @JsonAdapter(MerchantFeeEnum.Adapter.class)
 public enum MerchantFeeEnum {
    USD("USD");

    private String value;

    MerchantFeeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MerchantFeeEnum fromValue(String value) {
      for (MerchantFeeEnum b : MerchantFeeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MerchantFeeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MerchantFeeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MerchantFeeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MerchantFeeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MERCHANT_FEE = "merchantFee";
  @SerializedName(SERIALIZED_NAME_MERCHANT_FEE)
  private MerchantFeeEnum merchantFee;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_RATE_KEY = "rateKey";
  @SerializedName(SERIALIZED_NAME_RATE_KEY)
  private String rateKey;

  public static final String SERIALIZED_NAME_VOUCHER_CODE = "voucherCode";
  @SerializedName(SERIALIZED_NAME_VOUCHER_CODE)
  private String voucherCode;

  public VoucherRedeemAndWithdrawRequest() {
  }

  public VoucherRedeemAndWithdrawRequest cryptoAddress(String cryptoAddress) {
    
    
    
    
    this.cryptoAddress = cryptoAddress;
    return this;
  }

   /**
   * Must be provided along with newtwork. The crypto wallet address on the provided network, to which crypto equivalent will be sent
   * @return cryptoAddress
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Must be provided along with newtwork. The crypto wallet address on the provided network, to which crypto equivalent will be sent")

  public String getCryptoAddress() {
    return cryptoAddress;
  }


  public void setCryptoAddress(String cryptoAddress) {
    
    
    
    this.cryptoAddress = cryptoAddress;
  }


  public VoucherRedeemAndWithdrawRequest currency(CurrencyEnum currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * Cryptocurrency to send to the provided wallet details
   * @return currency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Cryptocurrency to send to the provided wallet details")

  public CurrencyEnum getCurrency() {
    return currency;
  }


  public void setCurrency(CurrencyEnum currency) {
    
    
    
    this.currency = currency;
  }


  public VoucherRedeemAndWithdrawRequest email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Email that was used to create the voucher
   * @return email
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Email that was used to create the voucher")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public VoucherRedeemAndWithdrawRequest merchantFee(MerchantFeeEnum merchantFee) {
    
    
    
    
    this.merchantFee = merchantFee;
    return this;
  }

   /**
   * In USD (optional). Can be supplied if the merchant want to withdraw a portion of the voucher amount into their Ventogram balance. This must be a fraction or all of voucher value (ie received amount - voucher fee)
   * @return merchantFee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "In USD (optional). Can be supplied if the merchant want to withdraw a portion of the voucher amount into their Ventogram balance. This must be a fraction or all of voucher value (ie received amount - voucher fee)")

  public MerchantFeeEnum getMerchantFee() {
    return merchantFee;
  }


  public void setMerchantFee(MerchantFeeEnum merchantFee) {
    
    
    
    this.merchantFee = merchantFee;
  }


  public VoucherRedeemAndWithdrawRequest network(String network) {
    
    
    
    
    this.network = network;
    return this;
  }

   /**
   * Supported crypto network
   * @return network
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Supported crypto network")

  public String getNetwork() {
    return network;
  }


  public void setNetwork(String network) {
    
    
    
    this.network = network;
  }


  public VoucherRedeemAndWithdrawRequest rateKey(String rateKey) {
    
    
    
    
    this.rateKey = rateKey;
    return this;
  }

   /**
   * This is a Ventogram-signed rate key. This will be returned in response if the signed rate was used for conversion.
   * @return rateKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This is a Ventogram-signed rate key. This will be returned in response if the signed rate was used for conversion.")

  public String getRateKey() {
    return rateKey;
  }


  public void setRateKey(String rateKey) {
    
    
    
    this.rateKey = rateKey;
  }


  public VoucherRedeemAndWithdrawRequest voucherCode(String voucherCode) {
    
    
    
    
    this.voucherCode = voucherCode;
    return this;
  }

   /**
   * Voucher code to be redeemed
   * @return voucherCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Voucher code to be redeemed")

  public String getVoucherCode() {
    return voucherCode;
  }


  public void setVoucherCode(String voucherCode) {
    
    
    
    this.voucherCode = voucherCode;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the VoucherRedeemAndWithdrawRequest instance itself
   */
  public VoucherRedeemAndWithdrawRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VoucherRedeemAndWithdrawRequest voucherRedeemAndWithdrawRequest = (VoucherRedeemAndWithdrawRequest) o;
    return Objects.equals(this.cryptoAddress, voucherRedeemAndWithdrawRequest.cryptoAddress) &&
        Objects.equals(this.currency, voucherRedeemAndWithdrawRequest.currency) &&
        Objects.equals(this.email, voucherRedeemAndWithdrawRequest.email) &&
        Objects.equals(this.merchantFee, voucherRedeemAndWithdrawRequest.merchantFee) &&
        Objects.equals(this.network, voucherRedeemAndWithdrawRequest.network) &&
        Objects.equals(this.rateKey, voucherRedeemAndWithdrawRequest.rateKey) &&
        Objects.equals(this.voucherCode, voucherRedeemAndWithdrawRequest.voucherCode)&&
        Objects.equals(this.additionalProperties, voucherRedeemAndWithdrawRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cryptoAddress, currency, email, merchantFee, network, rateKey, voucherCode, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VoucherRedeemAndWithdrawRequest {\n");
    sb.append("    cryptoAddress: ").append(toIndentedString(cryptoAddress)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    merchantFee: ").append(toIndentedString(merchantFee)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    rateKey: ").append(toIndentedString(rateKey)).append("\n");
    sb.append("    voucherCode: ").append(toIndentedString(voucherCode)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cryptoAddress");
    openapiFields.add("currency");
    openapiFields.add("email");
    openapiFields.add("merchantFee");
    openapiFields.add("network");
    openapiFields.add("rateKey");
    openapiFields.add("voucherCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cryptoAddress");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("network");
    openapiRequiredFields.add("voucherCode");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VoucherRedeemAndWithdrawRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VoucherRedeemAndWithdrawRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VoucherRedeemAndWithdrawRequest is not found in the empty JSON string", VoucherRedeemAndWithdrawRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VoucherRedeemAndWithdrawRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("cryptoAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cryptoAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cryptoAddress").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("merchantFee") != null && !jsonObj.get("merchantFee").isJsonNull()) && !jsonObj.get("merchantFee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantFee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantFee").toString()));
      }
      if (!jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if ((jsonObj.get("rateKey") != null && !jsonObj.get("rateKey").isJsonNull()) && !jsonObj.get("rateKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rateKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rateKey").toString()));
      }
      if (!jsonObj.get("voucherCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `voucherCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("voucherCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VoucherRedeemAndWithdrawRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VoucherRedeemAndWithdrawRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VoucherRedeemAndWithdrawRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VoucherRedeemAndWithdrawRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<VoucherRedeemAndWithdrawRequest>() {
           @Override
           public void write(JsonWriter out, VoucherRedeemAndWithdrawRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public VoucherRedeemAndWithdrawRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             VoucherRedeemAndWithdrawRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VoucherRedeemAndWithdrawRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VoucherRedeemAndWithdrawRequest
  * @throws IOException if the JSON string is invalid with respect to VoucherRedeemAndWithdrawRequest
  */
  public static VoucherRedeemAndWithdrawRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VoucherRedeemAndWithdrawRequest.class);
  }

 /**
  * Convert an instance of VoucherRedeemAndWithdrawRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

