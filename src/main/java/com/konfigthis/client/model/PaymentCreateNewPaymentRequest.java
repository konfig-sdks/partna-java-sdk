/*
 * Coinprofile business API
 * Coinprofile business API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PaymentCreateNewPaymentRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PaymentCreateNewPaymentRequest {
  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "accountName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "accountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_BANK = "bank";
  @SerializedName(SERIALIZED_NAME_BANK)
  private String bank;

  public static final String SERIALIZED_NAME_BANK_CODE = "bankCode";
  @SerializedName(SERIALIZED_NAME_BANK_CODE)
  private String bankCode;

  public static final String SERIALIZED_NAME_BUSINESS_ID = "businessId";
  @SerializedName(SERIALIZED_NAME_BUSINESS_ID)
  private String businessId;

  public static final String SERIALIZED_NAME_COINPROFILE_USERNAME = "coinprofileUsername";
  @SerializedName(SERIALIZED_NAME_COINPROFILE_USERNAME)
  private String coinprofileUsername;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_CUSTOMER_EMAIL = "customerEmail";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_EMAIL)
  private String customerEmail;

  public static final String SERIALIZED_NAME_INCOMING_AMOUNT = "incomingAmount";
  @SerializedName(SERIALIZED_NAME_INCOMING_AMOUNT)
  private Double incomingAmount;

  public static final String SERIALIZED_NAME_INCOMING_CURRENCY = "incomingCurrency";
  @SerializedName(SERIALIZED_NAME_INCOMING_CURRENCY)
  private String incomingCurrency;

  public static final String SERIALIZED_NAME_OUTGOING_AMOUNT = "outgoingAmount";
  @SerializedName(SERIALIZED_NAME_OUTGOING_AMOUNT)
  private Double outgoingAmount;

  public static final String SERIALIZED_NAME_OUTGOING_CURRENCY = "outgoingCurrency";
  @SerializedName(SERIALIZED_NAME_OUTGOING_CURRENCY)
  private String outgoingCurrency;

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "paymentType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private String paymentType;

  public static final String SERIALIZED_NAME_RATE_KEY = "rateKey";
  @SerializedName(SERIALIZED_NAME_RATE_KEY)
  private String rateKey;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public PaymentCreateNewPaymentRequest() {
  }

  public PaymentCreateNewPaymentRequest accountName(String accountName) {
    
    
    
    
    this.accountName = accountName;
    return this;
  }

   /**
   * The account name. Required when paymentType is bank
   * @return accountName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The account name. Required when paymentType is bank")

  public String getAccountName() {
    return accountName;
  }


  public void setAccountName(String accountName) {
    
    
    
    this.accountName = accountName;
  }


  public PaymentCreateNewPaymentRequest accountNumber(String accountNumber) {
    
    
    
    
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * The account number. Required when paymentType is bank
   * @return accountNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The account number. Required when paymentType is bank")

  public String getAccountNumber() {
    return accountNumber;
  }


  public void setAccountNumber(String accountNumber) {
    
    
    
    this.accountNumber = accountNumber;
  }


  public PaymentCreateNewPaymentRequest bank(String bank) {
    
    
    
    
    this.bank = bank;
    return this;
  }

   /**
   * The bank name. Required when paymentType is bank
   * @return bank
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The bank name. Required when paymentType is bank")

  public String getBank() {
    return bank;
  }


  public void setBank(String bank) {
    
    
    
    this.bank = bank;
  }


  public PaymentCreateNewPaymentRequest bankCode(String bankCode) {
    
    
    
    
    this.bankCode = bankCode;
    return this;
  }

   /**
   * The bank code. Required when paymentType is bank
   * @return bankCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The bank code. Required when paymentType is bank")

  public String getBankCode() {
    return bankCode;
  }


  public void setBankCode(String bankCode) {
    
    
    
    this.bankCode = bankCode;
  }


  public PaymentCreateNewPaymentRequest businessId(String businessId) {
    
    
    
    
    this.businessId = businessId;
    return this;
  }

   /**
   * The business id
   * @return businessId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The business id")

  public String getBusinessId() {
    return businessId;
  }


  public void setBusinessId(String businessId) {
    
    
    
    this.businessId = businessId;
  }


  public PaymentCreateNewPaymentRequest coinprofileUsername(String coinprofileUsername) {
    
    
    
    
    this.coinprofileUsername = coinprofileUsername;
    return this;
  }

   /**
   * The coinprofile username. Required when paymentType is profile
   * @return coinprofileUsername
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The coinprofile username. Required when paymentType is profile")

  public String getCoinprofileUsername() {
    return coinprofileUsername;
  }


  public void setCoinprofileUsername(String coinprofileUsername) {
    
    
    
    this.coinprofileUsername = coinprofileUsername;
  }


  public PaymentCreateNewPaymentRequest country(String country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * The country. Required when paymentType is bank
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The country. Required when paymentType is bank")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    
    
    
    this.country = country;
  }


  public PaymentCreateNewPaymentRequest customerEmail(String customerEmail) {
    
    
    
    
    this.customerEmail = customerEmail;
    return this;
  }

   /**
   * The rate key
   * @return customerEmail
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The rate key")

  public String getCustomerEmail() {
    return customerEmail;
  }


  public void setCustomerEmail(String customerEmail) {
    
    
    
    this.customerEmail = customerEmail;
  }


  public PaymentCreateNewPaymentRequest incomingAmount(Double incomingAmount) {
    
    
    
    
    this.incomingAmount = incomingAmount;
    return this;
  }

  public PaymentCreateNewPaymentRequest incomingAmount(Integer incomingAmount) {
    
    
    
    
    this.incomingAmount = incomingAmount.doubleValue();
    return this;
  }

   /**
   * The incoming amount
   * @return incomingAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The incoming amount")

  public Double getIncomingAmount() {
    return incomingAmount;
  }


  public void setIncomingAmount(Double incomingAmount) {
    
    
    
    this.incomingAmount = incomingAmount;
  }


  public PaymentCreateNewPaymentRequest incomingCurrency(String incomingCurrency) {
    
    
    
    
    this.incomingCurrency = incomingCurrency;
    return this;
  }

   /**
   * The incoming currency
   * @return incomingCurrency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The incoming currency")

  public String getIncomingCurrency() {
    return incomingCurrency;
  }


  public void setIncomingCurrency(String incomingCurrency) {
    
    
    
    this.incomingCurrency = incomingCurrency;
  }


  public PaymentCreateNewPaymentRequest outgoingAmount(Double outgoingAmount) {
    
    
    
    
    this.outgoingAmount = outgoingAmount;
    return this;
  }

  public PaymentCreateNewPaymentRequest outgoingAmount(Integer outgoingAmount) {
    
    
    
    
    this.outgoingAmount = outgoingAmount.doubleValue();
    return this;
  }

   /**
   * The outgoing amount
   * @return outgoingAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The outgoing amount")

  public Double getOutgoingAmount() {
    return outgoingAmount;
  }


  public void setOutgoingAmount(Double outgoingAmount) {
    
    
    
    this.outgoingAmount = outgoingAmount;
  }


  public PaymentCreateNewPaymentRequest outgoingCurrency(String outgoingCurrency) {
    
    
    
    
    this.outgoingCurrency = outgoingCurrency;
    return this;
  }

   /**
   * The outgoing currency
   * @return outgoingCurrency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The outgoing currency")

  public String getOutgoingCurrency() {
    return outgoingCurrency;
  }


  public void setOutgoingCurrency(String outgoingCurrency) {
    
    
    
    this.outgoingCurrency = outgoingCurrency;
  }


  public PaymentCreateNewPaymentRequest paymentType(String paymentType) {
    
    
    
    
    this.paymentType = paymentType;
    return this;
  }

   /**
   * The payment type
   * @return paymentType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The payment type")

  public String getPaymentType() {
    return paymentType;
  }


  public void setPaymentType(String paymentType) {
    
    
    
    this.paymentType = paymentType;
  }


  public PaymentCreateNewPaymentRequest rateKey(String rateKey) {
    
    
    
    
    this.rateKey = rateKey;
    return this;
  }

   /**
   * The rate key
   * @return rateKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The rate key")

  public String getRateKey() {
    return rateKey;
  }


  public void setRateKey(String rateKey) {
    
    
    
    this.rateKey = rateKey;
  }


  public PaymentCreateNewPaymentRequest reference(String reference) {
    
    
    
    
    this.reference = reference;
    return this;
  }

   /**
   * The reference
   * @return reference
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The reference")

  public String getReference() {
    return reference;
  }


  public void setReference(String reference) {
    
    
    
    this.reference = reference;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PaymentCreateNewPaymentRequest instance itself
   */
  public PaymentCreateNewPaymentRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentCreateNewPaymentRequest paymentCreateNewPaymentRequest = (PaymentCreateNewPaymentRequest) o;
    return Objects.equals(this.accountName, paymentCreateNewPaymentRequest.accountName) &&
        Objects.equals(this.accountNumber, paymentCreateNewPaymentRequest.accountNumber) &&
        Objects.equals(this.bank, paymentCreateNewPaymentRequest.bank) &&
        Objects.equals(this.bankCode, paymentCreateNewPaymentRequest.bankCode) &&
        Objects.equals(this.businessId, paymentCreateNewPaymentRequest.businessId) &&
        Objects.equals(this.coinprofileUsername, paymentCreateNewPaymentRequest.coinprofileUsername) &&
        Objects.equals(this.country, paymentCreateNewPaymentRequest.country) &&
        Objects.equals(this.customerEmail, paymentCreateNewPaymentRequest.customerEmail) &&
        Objects.equals(this.incomingAmount, paymentCreateNewPaymentRequest.incomingAmount) &&
        Objects.equals(this.incomingCurrency, paymentCreateNewPaymentRequest.incomingCurrency) &&
        Objects.equals(this.outgoingAmount, paymentCreateNewPaymentRequest.outgoingAmount) &&
        Objects.equals(this.outgoingCurrency, paymentCreateNewPaymentRequest.outgoingCurrency) &&
        Objects.equals(this.paymentType, paymentCreateNewPaymentRequest.paymentType) &&
        Objects.equals(this.rateKey, paymentCreateNewPaymentRequest.rateKey) &&
        Objects.equals(this.reference, paymentCreateNewPaymentRequest.reference)&&
        Objects.equals(this.additionalProperties, paymentCreateNewPaymentRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountName, accountNumber, bank, bankCode, businessId, coinprofileUsername, country, customerEmail, incomingAmount, incomingCurrency, outgoingAmount, outgoingCurrency, paymentType, rateKey, reference, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentCreateNewPaymentRequest {\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    bank: ").append(toIndentedString(bank)).append("\n");
    sb.append("    bankCode: ").append(toIndentedString(bankCode)).append("\n");
    sb.append("    businessId: ").append(toIndentedString(businessId)).append("\n");
    sb.append("    coinprofileUsername: ").append(toIndentedString(coinprofileUsername)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    customerEmail: ").append(toIndentedString(customerEmail)).append("\n");
    sb.append("    incomingAmount: ").append(toIndentedString(incomingAmount)).append("\n");
    sb.append("    incomingCurrency: ").append(toIndentedString(incomingCurrency)).append("\n");
    sb.append("    outgoingAmount: ").append(toIndentedString(outgoingAmount)).append("\n");
    sb.append("    outgoingCurrency: ").append(toIndentedString(outgoingCurrency)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    rateKey: ").append(toIndentedString(rateKey)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountName");
    openapiFields.add("accountNumber");
    openapiFields.add("bank");
    openapiFields.add("bankCode");
    openapiFields.add("businessId");
    openapiFields.add("coinprofileUsername");
    openapiFields.add("country");
    openapiFields.add("customerEmail");
    openapiFields.add("incomingAmount");
    openapiFields.add("incomingCurrency");
    openapiFields.add("outgoingAmount");
    openapiFields.add("outgoingCurrency");
    openapiFields.add("paymentType");
    openapiFields.add("rateKey");
    openapiFields.add("reference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("businessId");
    openapiRequiredFields.add("customerEmail");
    openapiRequiredFields.add("incomingCurrency");
    openapiRequiredFields.add("outgoingCurrency");
    openapiRequiredFields.add("paymentType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PaymentCreateNewPaymentRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PaymentCreateNewPaymentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentCreateNewPaymentRequest is not found in the empty JSON string", PaymentCreateNewPaymentRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentCreateNewPaymentRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("accountName") != null && !jsonObj.get("accountName").isJsonNull()) && !jsonObj.get("accountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountName").toString()));
      }
      if ((jsonObj.get("accountNumber") != null && !jsonObj.get("accountNumber").isJsonNull()) && !jsonObj.get("accountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountNumber").toString()));
      }
      if ((jsonObj.get("bank") != null && !jsonObj.get("bank").isJsonNull()) && !jsonObj.get("bank").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bank` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bank").toString()));
      }
      if ((jsonObj.get("bankCode") != null && !jsonObj.get("bankCode").isJsonNull()) && !jsonObj.get("bankCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankCode").toString()));
      }
      if (!jsonObj.get("businessId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessId").toString()));
      }
      if ((jsonObj.get("coinprofileUsername") != null && !jsonObj.get("coinprofileUsername").isJsonNull()) && !jsonObj.get("coinprofileUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coinprofileUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coinprofileUsername").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("customerEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerEmail").toString()));
      }
      if (!jsonObj.get("incomingCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incomingCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incomingCurrency").toString()));
      }
      if (!jsonObj.get("outgoingCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outgoingCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outgoingCurrency").toString()));
      }
      if (!jsonObj.get("paymentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentType").toString()));
      }
      if ((jsonObj.get("rateKey") != null && !jsonObj.get("rateKey").isJsonNull()) && !jsonObj.get("rateKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rateKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rateKey").toString()));
      }
      if ((jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) && !jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentCreateNewPaymentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentCreateNewPaymentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentCreateNewPaymentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentCreateNewPaymentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentCreateNewPaymentRequest>() {
           @Override
           public void write(JsonWriter out, PaymentCreateNewPaymentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentCreateNewPaymentRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PaymentCreateNewPaymentRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentCreateNewPaymentRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentCreateNewPaymentRequest
  * @throws IOException if the JSON string is invalid with respect to PaymentCreateNewPaymentRequest
  */
  public static PaymentCreateNewPaymentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentCreateNewPaymentRequest.class);
  }

 /**
  * Convert an instance of PaymentCreateNewPaymentRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

