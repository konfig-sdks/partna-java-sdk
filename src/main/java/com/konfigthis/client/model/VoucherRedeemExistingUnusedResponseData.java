/*
 * Coinprofile business API
 * Coinprofile business API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * VoucherRedeemExistingUnusedResponseData
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class VoucherRedeemExistingUnusedResponseData {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  /**
   * voucher payment currency
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
 public enum CurrencyEnum {
    NGN("NGN"),
    
    USD("USD");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String value) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CurrencyEnum currency;

  public static final String SERIALIZED_NAME_CURRENT_BALANCE = "currentBalance";
  @SerializedName(SERIALIZED_NAME_CURRENT_BALANCE)
  private Double currentBalance;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FEE = "fee";
  @SerializedName(SERIALIZED_NAME_FEE)
  private Double fee;

  /**
   * The bearer of voucher fee
   */
  @JsonAdapter(FeeBearerEnum.Adapter.class)
 public enum FeeBearerEnum {
    CLIENT("client"),
    
    MERCHANT("merchant");

    private String value;

    FeeBearerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeeBearerEnum fromValue(String value) {
      for (FeeBearerEnum b : FeeBearerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeeBearerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeeBearerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeeBearerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeeBearerEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FEE_BEARER = "feeBearer";
  @SerializedName(SERIALIZED_NAME_FEE_BEARER)
  private FeeBearerEnum feeBearer = FeeBearerEnum.CLIENT;

  public static final String SERIALIZED_NAME_FROM_AMOUNT = "fromAmount";
  @SerializedName(SERIALIZED_NAME_FROM_AMOUNT)
  private Double fromAmount;

  public static final String SERIALIZED_NAME_FROM_CURRENCY = "fromCurrency";
  @SerializedName(SERIALIZED_NAME_FROM_CURRENCY)
  private String fromCurrency;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MERCHANT = "merchant";
  @SerializedName(SERIALIZED_NAME_MERCHANT)
  private String merchant;

  public static final String SERIALIZED_NAME_PREVIOUS_BALANCE = "previousBalance";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_BALANCE)
  private Double previousBalance;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private Double rate;

  public static final String SERIALIZED_NAME_TO_AMOUNT = "toAmount";
  @SerializedName(SERIALIZED_NAME_TO_AMOUNT)
  private Double toAmount;

  public static final String SERIALIZED_NAME_TO_CURRENCY = "toCurrency";
  @SerializedName(SERIALIZED_NAME_TO_CURRENCY)
  private String toCurrency;

  public static final String SERIALIZED_NAME_VOUCHER_CODE = "voucherCode";
  @SerializedName(SERIALIZED_NAME_VOUCHER_CODE)
  private String voucherCode;

  public static final String SERIALIZED_NAME_WAVED_FEE = "wavedFee";
  @SerializedName(SERIALIZED_NAME_WAVED_FEE)
  private Double wavedFee;

  public VoucherRedeemExistingUnusedResponseData() {
  }

  public VoucherRedeemExistingUnusedResponseData amount(Double amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

  public VoucherRedeemExistingUnusedResponseData amount(Integer amount) {
    
    
    
    
    this.amount = amount.doubleValue();
    return this;
  }

   /**
   * Voucher amount after fee deduction
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Voucher amount after fee deduction")

  public Double getAmount() {
    return amount;
  }


  public void setAmount(Double amount) {
    
    
    
    this.amount = amount;
  }


  public VoucherRedeemExistingUnusedResponseData currency(CurrencyEnum currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * voucher payment currency
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "voucher payment currency")

  public CurrencyEnum getCurrency() {
    return currency;
  }


  public void setCurrency(CurrencyEnum currency) {
    
    
    
    this.currency = currency;
  }


  public VoucherRedeemExistingUnusedResponseData currentBalance(Double currentBalance) {
    
    
    
    
    this.currentBalance = currentBalance;
    return this;
  }

  public VoucherRedeemExistingUnusedResponseData currentBalance(Integer currentBalance) {
    
    
    
    
    this.currentBalance = currentBalance.doubleValue();
    return this;
  }

   /**
   * Merchant&#39;s balance after redeeming voucher
   * @return currentBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Merchant's balance after redeeming voucher")

  public Double getCurrentBalance() {
    return currentBalance;
  }


  public void setCurrentBalance(Double currentBalance) {
    
    
    
    this.currentBalance = currentBalance;
  }


  public VoucherRedeemExistingUnusedResponseData email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Email that aws used to create the voucher
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Email that aws used to create the voucher")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public VoucherRedeemExistingUnusedResponseData fee(Double fee) {
    
    
    
    
    this.fee = fee;
    return this;
  }

  public VoucherRedeemExistingUnusedResponseData fee(Integer fee) {
    
    
    
    
    this.fee = fee.doubleValue();
    return this;
  }

   /**
   * The fee associated with voucher
   * @return fee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The fee associated with voucher")

  public Double getFee() {
    return fee;
  }


  public void setFee(Double fee) {
    
    
    
    this.fee = fee;
  }


  public VoucherRedeemExistingUnusedResponseData feeBearer(FeeBearerEnum feeBearer) {
    
    
    
    
    this.feeBearer = feeBearer;
    return this;
  }

   /**
   * The bearer of voucher fee
   * @return feeBearer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CLIENT", value = "The bearer of voucher fee")

  public FeeBearerEnum getFeeBearer() {
    return feeBearer;
  }


  public void setFeeBearer(FeeBearerEnum feeBearer) {
    
    
    
    this.feeBearer = feeBearer;
  }


  public VoucherRedeemExistingUnusedResponseData fromAmount(Double fromAmount) {
    
    
    
    
    this.fromAmount = fromAmount;
    return this;
  }

  public VoucherRedeemExistingUnusedResponseData fromAmount(Integer fromAmount) {
    
    
    
    
    this.fromAmount = fromAmount.doubleValue();
    return this;
  }

   /**
   * The amount in the currency that was converted from when conversion was done. If there&#39;s no conversion, this is the same as toAmount.
   * @return fromAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The amount in the currency that was converted from when conversion was done. If there's no conversion, this is the same as toAmount.")

  public Double getFromAmount() {
    return fromAmount;
  }


  public void setFromAmount(Double fromAmount) {
    
    
    
    this.fromAmount = fromAmount;
  }


  public VoucherRedeemExistingUnusedResponseData fromCurrency(String fromCurrency) {
    
    
    
    
    this.fromCurrency = fromCurrency;
    return this;
  }

   /**
   * The currency from which conversion was done. If there&#39;s no conversion, this is the same as toCurrency.
   * @return fromCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The currency from which conversion was done. If there's no conversion, this is the same as toCurrency.")

  public String getFromCurrency() {
    return fromCurrency;
  }


  public void setFromCurrency(String fromCurrency) {
    
    
    
    this.fromCurrency = fromCurrency;
  }


  public VoucherRedeemExistingUnusedResponseData id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Voucher ID
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Voucher ID")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public VoucherRedeemExistingUnusedResponseData merchant(String merchant) {
    
    
    
    
    this.merchant = merchant;
    return this;
  }

   /**
   * username of the merchant that created the voucher
   * @return merchant
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "username of the merchant that created the voucher")

  public String getMerchant() {
    return merchant;
  }


  public void setMerchant(String merchant) {
    
    
    
    this.merchant = merchant;
  }


  public VoucherRedeemExistingUnusedResponseData previousBalance(Double previousBalance) {
    
    
    
    
    this.previousBalance = previousBalance;
    return this;
  }

  public VoucherRedeemExistingUnusedResponseData previousBalance(Integer previousBalance) {
    
    
    
    
    this.previousBalance = previousBalance.doubleValue();
    return this;
  }

   /**
   * Merchant&#39;s balance before redeeming voucher
   * @return previousBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Merchant's balance before redeeming voucher")

  public Double getPreviousBalance() {
    return previousBalance;
  }


  public void setPreviousBalance(Double previousBalance) {
    
    
    
    this.previousBalance = previousBalance;
  }


  public VoucherRedeemExistingUnusedResponseData rate(Double rate) {
    
    
    
    
    this.rate = rate;
    return this;
  }

  public VoucherRedeemExistingUnusedResponseData rate(Integer rate) {
    
    
    
    
    this.rate = rate.doubleValue();
    return this;
  }

   /**
   * The exchange rate that was used for conversion when conversion was done. If there&#39;s no conversion, the value is 1.
   * @return rate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The exchange rate that was used for conversion when conversion was done. If there's no conversion, the value is 1.")

  public Double getRate() {
    return rate;
  }


  public void setRate(Double rate) {
    
    
    
    this.rate = rate;
  }


  public VoucherRedeemExistingUnusedResponseData toAmount(Double toAmount) {
    
    
    
    
    this.toAmount = toAmount;
    return this;
  }

  public VoucherRedeemExistingUnusedResponseData toAmount(Integer toAmount) {
    
    
    
    
    this.toAmount = toAmount.doubleValue();
    return this;
  }

   /**
   * The amount in the currency that was converted to when conversion was done. If there&#39;s no conversion, this is the same as fromAmount.
   * @return toAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The amount in the currency that was converted to when conversion was done. If there's no conversion, this is the same as fromAmount.")

  public Double getToAmount() {
    return toAmount;
  }


  public void setToAmount(Double toAmount) {
    
    
    
    this.toAmount = toAmount;
  }


  public VoucherRedeemExistingUnusedResponseData toCurrency(String toCurrency) {
    
    
    
    
    this.toCurrency = toCurrency;
    return this;
  }

   /**
   * The currency to which conversion was done. If there&#39;s no conversion, this is the same as fromCurrency.
   * @return toCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The currency to which conversion was done. If there's no conversion, this is the same as fromCurrency.")

  public String getToCurrency() {
    return toCurrency;
  }


  public void setToCurrency(String toCurrency) {
    
    
    
    this.toCurrency = toCurrency;
  }


  public VoucherRedeemExistingUnusedResponseData voucherCode(String voucherCode) {
    
    
    
    
    this.voucherCode = voucherCode;
    return this;
  }

   /**
   * Voucher code to be redeemed
   * @return voucherCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Voucher code to be redeemed")

  public String getVoucherCode() {
    return voucherCode;
  }


  public void setVoucherCode(String voucherCode) {
    
    
    
    this.voucherCode = voucherCode;
  }


  public VoucherRedeemExistingUnusedResponseData wavedFee(Double wavedFee) {
    
    
    
    
    this.wavedFee = wavedFee;
    return this;
  }

  public VoucherRedeemExistingUnusedResponseData wavedFee(Integer wavedFee) {
    
    
    
    
    this.wavedFee = wavedFee.doubleValue();
    return this;
  }

   /**
   * Waved fee (if available)
   * @return wavedFee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Waved fee (if available)")

  public Double getWavedFee() {
    return wavedFee;
  }


  public void setWavedFee(Double wavedFee) {
    
    
    
    this.wavedFee = wavedFee;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the VoucherRedeemExistingUnusedResponseData instance itself
   */
  public VoucherRedeemExistingUnusedResponseData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VoucherRedeemExistingUnusedResponseData voucherRedeemExistingUnusedResponseData = (VoucherRedeemExistingUnusedResponseData) o;
    return Objects.equals(this.amount, voucherRedeemExistingUnusedResponseData.amount) &&
        Objects.equals(this.currency, voucherRedeemExistingUnusedResponseData.currency) &&
        Objects.equals(this.currentBalance, voucherRedeemExistingUnusedResponseData.currentBalance) &&
        Objects.equals(this.email, voucherRedeemExistingUnusedResponseData.email) &&
        Objects.equals(this.fee, voucherRedeemExistingUnusedResponseData.fee) &&
        Objects.equals(this.feeBearer, voucherRedeemExistingUnusedResponseData.feeBearer) &&
        Objects.equals(this.fromAmount, voucherRedeemExistingUnusedResponseData.fromAmount) &&
        Objects.equals(this.fromCurrency, voucherRedeemExistingUnusedResponseData.fromCurrency) &&
        Objects.equals(this.id, voucherRedeemExistingUnusedResponseData.id) &&
        Objects.equals(this.merchant, voucherRedeemExistingUnusedResponseData.merchant) &&
        Objects.equals(this.previousBalance, voucherRedeemExistingUnusedResponseData.previousBalance) &&
        Objects.equals(this.rate, voucherRedeemExistingUnusedResponseData.rate) &&
        Objects.equals(this.toAmount, voucherRedeemExistingUnusedResponseData.toAmount) &&
        Objects.equals(this.toCurrency, voucherRedeemExistingUnusedResponseData.toCurrency) &&
        Objects.equals(this.voucherCode, voucherRedeemExistingUnusedResponseData.voucherCode) &&
        Objects.equals(this.wavedFee, voucherRedeemExistingUnusedResponseData.wavedFee)&&
        Objects.equals(this.additionalProperties, voucherRedeemExistingUnusedResponseData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, currency, currentBalance, email, fee, feeBearer, fromAmount, fromCurrency, id, merchant, previousBalance, rate, toAmount, toCurrency, voucherCode, wavedFee, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VoucherRedeemExistingUnusedResponseData {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    currentBalance: ").append(toIndentedString(currentBalance)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    feeBearer: ").append(toIndentedString(feeBearer)).append("\n");
    sb.append("    fromAmount: ").append(toIndentedString(fromAmount)).append("\n");
    sb.append("    fromCurrency: ").append(toIndentedString(fromCurrency)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    merchant: ").append(toIndentedString(merchant)).append("\n");
    sb.append("    previousBalance: ").append(toIndentedString(previousBalance)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    toAmount: ").append(toIndentedString(toAmount)).append("\n");
    sb.append("    toCurrency: ").append(toIndentedString(toCurrency)).append("\n");
    sb.append("    voucherCode: ").append(toIndentedString(voucherCode)).append("\n");
    sb.append("    wavedFee: ").append(toIndentedString(wavedFee)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("currency");
    openapiFields.add("currentBalance");
    openapiFields.add("email");
    openapiFields.add("fee");
    openapiFields.add("feeBearer");
    openapiFields.add("fromAmount");
    openapiFields.add("fromCurrency");
    openapiFields.add("id");
    openapiFields.add("merchant");
    openapiFields.add("previousBalance");
    openapiFields.add("rate");
    openapiFields.add("toAmount");
    openapiFields.add("toCurrency");
    openapiFields.add("voucherCode");
    openapiFields.add("wavedFee");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VoucherRedeemExistingUnusedResponseData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VoucherRedeemExistingUnusedResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VoucherRedeemExistingUnusedResponseData is not found in the empty JSON string", VoucherRedeemExistingUnusedResponseData.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("feeBearer") != null && !jsonObj.get("feeBearer").isJsonNull()) && !jsonObj.get("feeBearer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feeBearer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feeBearer").toString()));
      }
      if ((jsonObj.get("fromCurrency") != null && !jsonObj.get("fromCurrency").isJsonNull()) && !jsonObj.get("fromCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromCurrency").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("merchant") != null && !jsonObj.get("merchant").isJsonNull()) && !jsonObj.get("merchant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant").toString()));
      }
      if ((jsonObj.get("toCurrency") != null && !jsonObj.get("toCurrency").isJsonNull()) && !jsonObj.get("toCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toCurrency").toString()));
      }
      if ((jsonObj.get("voucherCode") != null && !jsonObj.get("voucherCode").isJsonNull()) && !jsonObj.get("voucherCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `voucherCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("voucherCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VoucherRedeemExistingUnusedResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VoucherRedeemExistingUnusedResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VoucherRedeemExistingUnusedResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VoucherRedeemExistingUnusedResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<VoucherRedeemExistingUnusedResponseData>() {
           @Override
           public void write(JsonWriter out, VoucherRedeemExistingUnusedResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public VoucherRedeemExistingUnusedResponseData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             VoucherRedeemExistingUnusedResponseData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VoucherRedeemExistingUnusedResponseData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VoucherRedeemExistingUnusedResponseData
  * @throws IOException if the JSON string is invalid with respect to VoucherRedeemExistingUnusedResponseData
  */
  public static VoucherRedeemExistingUnusedResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VoucherRedeemExistingUnusedResponseData.class);
  }

 /**
  * Convert an instance of VoucherRedeemExistingUnusedResponseData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

