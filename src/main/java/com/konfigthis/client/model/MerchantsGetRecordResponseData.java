/*
 * Coinprofile business API
 * Coinprofile business API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * MerchantsGetRecordResponseData
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class MerchantsGetRecordResponseData {
  /**
   * Merchant&#39;s credit currency
   */
  @JsonAdapter(CreditCurrencyEnum.Adapter.class)
 public enum CreditCurrencyEnum {
    NGN("NGN"),
    
    USD("USD");

    private String value;

    CreditCurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreditCurrencyEnum fromValue(String value) {
      for (CreditCurrencyEnum b : CreditCurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreditCurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreditCurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreditCurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CreditCurrencyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CREDIT_CURRENCY = "creditCurrency";
  @SerializedName(SERIALIZED_NAME_CREDIT_CURRENCY)
  private CreditCurrencyEnum creditCurrency;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EXPIRES = "expires";
  @SerializedName(SERIALIZED_NAME_EXPIRES)
  private OffsetDateTime expires;

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private String logo;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public MerchantsGetRecordResponseData() {
  }

  public MerchantsGetRecordResponseData creditCurrency(CreditCurrencyEnum creditCurrency) {
    
    
    
    
    this.creditCurrency = creditCurrency;
    return this;
  }

   /**
   * Merchant&#39;s credit currency
   * @return creditCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Merchant's credit currency")

  public CreditCurrencyEnum getCreditCurrency() {
    return creditCurrency;
  }


  public void setCreditCurrency(CreditCurrencyEnum creditCurrency) {
    
    
    
    this.creditCurrency = creditCurrency;
  }


  public MerchantsGetRecordResponseData email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Merchant email address
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Merchant email address")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public MerchantsGetRecordResponseData expires(OffsetDateTime expires) {
    
    
    
    
    this.expires = expires;
    return this;
  }

   /**
   * API key expiry date and time
   * @return expires
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2023-10-03T09:21:05.197Z", value = "API key expiry date and time")

  public OffsetDateTime getExpires() {
    return expires;
  }


  public void setExpires(OffsetDateTime expires) {
    
    
    
    this.expires = expires;
  }


  public MerchantsGetRecordResponseData logo(String logo) {
    
    
    
    
    this.logo = logo;
    return this;
  }

   /**
   * Merchant logo URL
   * @return logo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://www.example.com/favicon", value = "Merchant logo URL")

  public String getLogo() {
    return logo;
  }


  public void setLogo(String logo) {
    
    
    
    this.logo = logo;
  }


  public MerchantsGetRecordResponseData username(String username) {
    
    
    
    
    this.username = username;
    return this;
  }

   /**
   * Merchant username
   * @return username
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Merchant username")

  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    
    
    
    this.username = username;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MerchantsGetRecordResponseData instance itself
   */
  public MerchantsGetRecordResponseData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MerchantsGetRecordResponseData merchantsGetRecordResponseData = (MerchantsGetRecordResponseData) o;
    return Objects.equals(this.creditCurrency, merchantsGetRecordResponseData.creditCurrency) &&
        Objects.equals(this.email, merchantsGetRecordResponseData.email) &&
        Objects.equals(this.expires, merchantsGetRecordResponseData.expires) &&
        Objects.equals(this.logo, merchantsGetRecordResponseData.logo) &&
        Objects.equals(this.username, merchantsGetRecordResponseData.username)&&
        Objects.equals(this.additionalProperties, merchantsGetRecordResponseData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creditCurrency, email, expires, logo, username, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MerchantsGetRecordResponseData {\n");
    sb.append("    creditCurrency: ").append(toIndentedString(creditCurrency)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creditCurrency");
    openapiFields.add("email");
    openapiFields.add("expires");
    openapiFields.add("logo");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MerchantsGetRecordResponseData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MerchantsGetRecordResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MerchantsGetRecordResponseData is not found in the empty JSON string", MerchantsGetRecordResponseData.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("creditCurrency") != null && !jsonObj.get("creditCurrency").isJsonNull()) && !jsonObj.get("creditCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditCurrency").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) && !jsonObj.get("logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MerchantsGetRecordResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MerchantsGetRecordResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MerchantsGetRecordResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MerchantsGetRecordResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<MerchantsGetRecordResponseData>() {
           @Override
           public void write(JsonWriter out, MerchantsGetRecordResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MerchantsGetRecordResponseData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MerchantsGetRecordResponseData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MerchantsGetRecordResponseData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MerchantsGetRecordResponseData
  * @throws IOException if the JSON string is invalid with respect to MerchantsGetRecordResponseData
  */
  public static MerchantsGetRecordResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MerchantsGetRecordResponseData.class);
  }

 /**
  * Convert an instance of MerchantsGetRecordResponseData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

