/*
 * Coinprofile business API
 * Coinprofile business API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.BalanceGetAccountBalance200Response;
import com.konfigthis.client.model.BalanceGetAccountBalanceResponse;
import com.konfigthis.client.model.BalanceTransferFundsRequest;
import com.konfigthis.client.model.BalanceTransferFundsResponse;
import com.konfigthis.client.model.BalanceWithdrawFundsRequest;
import com.konfigthis.client.model.BalanceWithdrawFundsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BalanceApi
 */
@Disabled
public class BalanceApiTest {

    private static BalanceApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new BalanceApi(apiClient);
    }

    /**
     * Retrieve merchant account balance
     *
     * Retrieves account balance for the selected currency
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountBalanceTest() throws ApiException {
        String currency = null;
        BalanceGetAccountBalanceResponse response = api.getAccountBalance(currency)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve user&#39;s account balance
     *
     * Retrieves account balance for each currency
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountBalance_0Test() throws ApiException {
        String currency = null;
        BalanceGetAccountBalance200Response response = api.getAccountBalance_0()
                .currency(currency)
                .execute();
        // TODO: test validations
    }

    /**
     * Transfer funds
     *
     * Transfer funds from user&#39;s balance to another user (fiat-to-fiat)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transferFundsTest() throws ApiException {
        String currency = null;
        String receiverUsername = null;
        String amount = null;
        String memo = null;
        String otpType = null;
        String token = null;
        BalanceTransferFundsResponse response = api.transferFunds(currency, receiverUsername)
                .amount(amount)
                .memo(memo)
                .otpType(otpType)
                .token(token)
                .execute();
        // TODO: test validations
    }

    /**
     * Withdraw balance
     *
     * Withdraw funds from the user&#39;s balance
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void withdrawFundsTest() throws ApiException {
        String accountName = null;
        String accountNumber = null;
        String amount = null;
        String bank = null;
        String bankCode = null;
        String currency = null;
        String otpType = null;
        String token = null;
        BalanceWithdrawFundsResponse response = api.withdrawFunds(accountName, accountNumber, amount, bank, bankCode, currency, otpType)
                .token(token)
                .execute();
        // TODO: test validations
    }

}
