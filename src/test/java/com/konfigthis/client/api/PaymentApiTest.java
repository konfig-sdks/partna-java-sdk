/*
 * Coinprofile business API
 * Coinprofile business API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.PaymentCreateNewPaymentRequest;
import com.konfigthis.client.model.PaymentCreateNewPaymentResponse;
import com.konfigthis.client.model.PaymentGetSingleResponse;
import com.konfigthis.client.model.PaymentResolveOverpaidTransactionResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentApi
 */
@Disabled
public class PaymentApiTest {

    private static PaymentApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PaymentApi(apiClient);
    }

    /**
     * Create payment
     *
     * Create a new payment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewPaymentTest() throws ApiException {
        String businessId = null;
        String customerEmail = null;
        String incomingCurrency = null;
        String outgoingCurrency = null;
        String paymentType = null;
        String accountName = null;
        String accountNumber = null;
        String bank = null;
        String bankCode = null;
        String coinprofileUsername = null;
        String country = null;
        Double incomingAmount = null;
        Double outgoingAmount = null;
        String rateKey = null;
        String reference = null;
        PaymentCreateNewPaymentResponse response = api.createNewPayment(businessId, customerEmail, incomingCurrency, outgoingCurrency, paymentType)
                .accountName(accountName)
                .accountNumber(accountNumber)
                .bank(bank)
                .bankCode(bankCode)
                .coinprofileUsername(coinprofileUsername)
                .country(country)
                .incomingAmount(incomingAmount)
                .outgoingAmount(outgoingAmount)
                .rateKey(rateKey)
                .reference(reference)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a single payment
     *
     * Get a single payment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSingleTest() throws ApiException {
        String paymentId = null;
        PaymentGetSingleResponse response = api.getSingle(paymentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Resolve overpaid Transaction
     *
     * Resolve overpaid Transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resolveOverpaidTransactionTest() throws ApiException {
        String id = null;
        String option = null;
        PaymentResolveOverpaidTransactionResponse response = api.resolveOverpaidTransaction(id, option)
                .execute();
        // TODO: test validations
    }

}
