/*
 * Coinprofile business API
 * Coinprofile business API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.VoucherCreatePaymentRequest;
import com.konfigthis.client.model.VoucherCreatePaymentResponse;
import com.konfigthis.client.model.VoucherGetMultipleRecordsResponse;
import com.konfigthis.client.model.VoucherGetRecordResponse;
import com.konfigthis.client.model.VoucherRedeemAndWithdrawRequest;
import com.konfigthis.client.model.VoucherRedeemAndWithdrawResponse;
import com.konfigthis.client.model.VoucherRedeemExistingUnusedRequest;
import com.konfigthis.client.model.VoucherRedeemExistingUnusedResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VoucherApi
 */
@Disabled
public class VoucherApiTest {

    private static VoucherApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new VoucherApi(apiClient);
    }

    /**
     * Create a new voucher payment
     *
     * Creates a new voucher payment for a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPaymentTest() throws ApiException {
        Integer amount = null;
        String currency = null;
        String email = null;
        String fullname = null;
        String rateKey = null;
        VoucherCreatePaymentResponse response = api.createPayment(amount, currency, email, fullname)
                .rateKey(rateKey)
                .execute();
        // TODO: test validations
    }

    /**
     * Get multiple records
     *
     * Retrieves a collection of voucher records, sorted in descending order by their creation date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMultipleRecordsTest() throws ApiException {
        Double page = null;
        Double pageSize = null;
        String paymentStatus = null;
        VoucherGetMultipleRecordsResponse response = api.getMultipleRecords()
                .page(page)
                .pageSize(pageSize)
                .paymentStatus(paymentStatus)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve voucher record
     *
     * Retrieves an existing voucher record(s). When no query param is provided, all the voucher record for the merchant will be returned. If accountNumber field is provided in the query, all the voucher records associated with the given accountNumber for the merchant will be returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecordTest() throws ApiException {
        String id = null;
        String memo = null;
        String accountNumber = null;
        VoucherGetRecordResponse response = api.getRecord()
                .id(id)
                .memo(memo)
                .accountNumber(accountNumber)
                .execute();
        // TODO: test validations
    }

    /**
     * Redeem and withdraw
     *
     * Redeems an existing unused voucher and transfers crypto to the provided wallet address
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redeemAndWithdrawTest() throws ApiException {
        String cryptoAddress = null;
        String currency = null;
        String email = null;
        String network = null;
        String voucherCode = null;
        String merchantFee = null;
        String rateKey = null;
        VoucherRedeemAndWithdrawResponse response = api.redeemAndWithdraw(cryptoAddress, currency, email, network, voucherCode)
                .merchantFee(merchantFee)
                .rateKey(rateKey)
                .execute();
        // TODO: test validations
    }

    /**
     * Redeem existing unused voucher
     *
     * Redeems an existing unused voucher
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redeemExistingUnusedTest() throws ApiException {
        String email = null;
        String voucherCode = null;
        VoucherRedeemExistingUnusedResponse response = api.redeemExistingUnused(email, voucherCode)
                .execute();
        // TODO: test validations
    }

}
